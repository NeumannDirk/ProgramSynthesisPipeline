(set-logic ALL)
(declare-datatype Tuple ((empty) (mkTuple (getField0 Int)(getField1 Int)(getField2 Int))))

(declare-var a_preCon Int)
(declare-var a_postCon Int)
(declare-var b_preCon Int)
(declare-var b_postCon Int)
(declare-var c_preCon Int)
(declare-var c_postCon Int)
(declare-var x_preCon Int)
(declare-var x_postCon Int)
(declare-var y_preCon Int)
(declare-var y_postCon Int)
(declare-var z_preCon Int)
(declare-var z_postCon Int)

(define-fun preCondition ((a_preCon Int) (b_preCon Int) (c_preCon Int) (x_preCon Int) (y_preCon Int) (z_preCon Int)) Bool (and (and (= x_preCon a_preCon) (= y_preCon b_preCon) (= z_preCon c_preCon) true)))

(define-fun postCondition ((a_postCon Int) (b_postCon Int) (c_postCon Int) (x_postCon Int) (y_postCon Int) (z_postCon Int)) Bool (and (and (= x_postCon (+ a_postCon b_postCon)) (= y_postCon (* 2 c_postCon)) (= z_postCon (* 2 a_postCon)))))

(synth-fun targetFunction ((a Int) (b Int) (c Int) (x Int) (y Int) (z Int)) Tuple)

(declare-var a_in Int)
(declare-var b_in Int)
(declare-var c_in Int)
(declare-var x_in Int)
(declare-var y_in Int)
(declare-var z_in Int)
(declare-var x_out Int)
(declare-var y_out Int)
(declare-var z_out Int)

(constraint (forall ((a_in Int) (b_in Int) (c_in Int) (x_in Int) (y_in Int) (z_in Int) (x_out Int) (y_out Int) (z_out Int)) (=>
	(and
		(preCondition a_in b_in c_in x_in y_in z_in)
		(= x_out (getField0 (targetFunction a_in b_in c_in x_in y_in z_in)))
		(= y_out (getField1 (targetFunction a_in b_in c_in x_in y_in z_in)))
		(= z_out (getField2 (targetFunction a_in b_in c_in x_in y_in z_in)))
	)
	(and
		(postCondition a_in b_in c_in x_out y_out z_out)
	)
)))
(check-synth)