\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Mar 14 12:13:19 CET 2024
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "D:/evalData_noPredicates";
\include "helper.key";
\programVariables {
int n;
int f;
int n_old;
Heap heapAtPre;
}\problem {
     geq(n, Z(0(#)))
   & n = Z(1(#))
   & geq(n, Z(0(#)))
   & lt(n, Z(6(#)))
   & wellFormed(heap)
-> {heapAtPre:=heap || n_old:=n}
     \<{
         f=1;
       }\> (f = Helper::factorial2(heap, n) & n = n_old)

}

\proof {
(keyLog "0" (keyUser "DirkNeumann" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "219")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "5") (term "0,0,1"))
(rule "eqSymm" (formula "5") (term "1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "3"))
(rule "mul_literals" (formula "3") (term "1,0,0"))
(rule "add_literals" (formula "3") (term "0,0"))
(rule "assignment" (formula "5") (term "1"))
(builtin "One Step Simplification" (formula "5"))
(rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "1"))
(rule "applyEq" (formula "3") (term "1,0") (ifseqformula "1"))
(rule "add_literals" (formula "3") (term "0"))
(rule "leq_literals" (formula "3"))
(rule "true_left" (formula "3"))
(rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
(rule "qeq_literals" (formula "2"))
(rule "true_left" (formula "2"))
(rule "emptyModality" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "eqSymm" (formula "3") (term "1"))
(rule "replace_known_left" (formula "3") (term "1") (ifseqformula "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "applyEq" (formula "3") (term "1,0") (ifseqformula "1"))
(builtin "Evaluate Query" (formula "3") (term "0") (newnames "x,callee,queryResult,res_factorial"))
(rule "replaceKnownQuery_Helper_factorial(heap,Z(1(#)))__0" (formula "4") (term "0"))
(rule "notLeft" (formula "1"))
(rule "eqSymm" (formula "3") (term "0,0,1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "queryResult"))
(rule "methodCallWithAssignmentWithinClass" (formula "3") (term "1") (inst "#v0=x_1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_1"))
(rule "variableDeclarationAssign" (formula "3") (term "1"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_2"))
(rule "assignment" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_factorial,savedHeapBefore_factorial"))
(builtin "One Step Simplification" (formula "3"))
(rule "ifElseUnfold" (formula "3") (term "1") (inst "#boolv=x_3"))
(rule "variableDeclaration" (formula "3") (term "1") (newnames "x_3"))
(rule "less_equal_than_comparison_simple" (formula "3") (term "1"))
(builtin "One Step Simplification" (formula "3"))
(rule "leq_literals" (formula "3") (term "0,0,1,0"))
(builtin "One Step Simplification" (formula "3"))
(rule "ifElseSplit" (formula "3"))
(branch "if x_3 true"
   (builtin "One Step Simplification" (formula "4"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "if x_3 false"
   (builtin "One Step Simplification" (formula "4"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "returnUnfold" (formula "3") (term "1") (inst "#v0=x_3"))
   (rule "variableDeclarationAssign" (formula "3") (term "1"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "x_4"))
   (rule "compound_multiplication_2" (formula "3") (term "1") (inst "#v1=x_6") (inst "#v0=x_5"))
   (rule "variableDeclarationAssign" (formula "3") (term "1"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "x_5"))
   (rule "assignment" (formula "3") (term "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "variableDeclarationAssign" (formula "3") (term "1"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "x_6"))
   (rule "methodCallWithAssignmentUnfoldArguments" (formula "3") (term "1"))
   (rule "variableDeclarationAssign" (formula "3") (term "1"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "var"))
   (rule "assignmentSubtractionInt" (formula "3") (term "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "translateJavaSubInt" (formula "3") (term "0,1,0"))
   (rule "sub_literals" (formula "3") (term "0,1,0"))
   (rule "methodCallWithAssignmentWithinClass" (formula "3") (term "1") (inst "#v0=x_7"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "x_7"))
   (rule "variableDeclarationAssign" (formula "3") (term "1"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "x_8"))
   (rule "assignment" (formula "3") (term "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "methodBodyExpand" (formula "3") (term "1") (newnames "heapBefore_factorial_0,savedHeapBefore_factorial_0"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "ifElseUnfold" (formula "3") (term "1") (inst "#boolv=x_9"))
   (rule "variableDeclaration" (formula "3") (term "1") (newnames "x_9"))
   (rule "less_equal_than_comparison_simple" (formula "3") (term "1"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "leq_literals" (formula "3") (term "0,0,1,0"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "ifElseSplit" (formula "3"))
   (branch "if x_9 true"
      (builtin "One Step Simplification" (formula "4"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "methodCallReturn" (formula "3") (term "1"))
      (rule "assignment" (formula "3") (term "1"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "methodCallEmpty" (formula "3") (term "1"))
      (rule "blockEmpty" (formula "3") (term "1"))
      (rule "assignment" (formula "3") (term "1"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "blockEmpty" (formula "3") (term "1"))
      (rule "assignmentMultiplicationInt" (formula "3") (term "1"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "translateJavaMulInt" (formula "3") (term "0,1,0"))
      (rule "mul_literals" (formula "3") (term "0,1,0"))
      (rule "methodCallReturn" (formula "3") (term "1"))
      (rule "assignment" (formula "3") (term "1"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "methodCallEmpty" (formula "3") (term "1"))
      (rule "blockEmpty" (formula "3") (term "1"))
      (rule "assignment" (formula "3") (term "1"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "methodCallEmpty" (formula "3") (term "1"))
      (builtin "One Step Simplification" (formula "3"))
      (rule "emptyModality" (formula "3") (term "1"))
      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "4")))
      (rule "closeTrue" (formula "3"))
   )
   (branch "if x_9 false"
      (builtin "One Step Simplification" (formula "4"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
//statementid:{a36cd4bb-d923-4ae2-887a-bd39f0009448}
//modifiable:{f}