\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Mar 14 12:06:53 CET 2024
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/DirkNeumann/eclipse-workspaces/runtime-EclipseApplication/de.tu_bs.cs.isf.corc.examples";
\include "helper.key";
\programVariables {
int j;
int i;
int[] A;
int variant;
Heap heapAtPre;
}\problem {
     \forall int q;
       (  !(geq(q, Z(0(#))) & lt(q, j))
        | geq(int::select(heap, A, arr(i)),
              int::select(heap, A, arr(q))))
   & !j = length(A)
   & !A = null
   & gt(length(A), Z(0(#)))
   & lt(length(A), Z(0(1(#))))
   & geq(i, Z(0(#)))
   & lt(i, length(A))
   & geq(j, Z(0(#)))
   & leq(j, length(A))
   &   boolean::select(heap,
                       A,
                       java.lang.Object::<created>)
     = TRUE
   & wellFormed(heap)
-> {heapAtPre:=heap || variant:=sub(length(A), j)}
     \<{
         if (A[j]>A[i]) {
           i=j;
         }
         else 
           if (A[j]<=A[i]) {
             ;
           }
         j=j+1;
       }\> (  lt(sub(length(A), j), variant)
            & geq(sub(length(A), j), Z(0(#))))

}

\proof {
(keyLog "0" (keyUser "DirkNeumann" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "874")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "10"))
(rule "polySimp_elimSub" (formula "12") (term "0,0,0,1"))
(rule "polySimp_elimSub" (formula "12") (term "0,0"))
(rule "polySimp_elimSub" (formula "12") (term "0,1,0,1"))
(rule "polySimp_addComm0" (formula "12") (term "0,0,0,1"))
(rule "polySimp_addComm0" (formula "12") (term "0,0"))
(rule "polySimp_addComm0" (formula "12") (term "0,1,0,1"))
(rule "inEqSimp_ltToLeq" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "5") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "3"))
(rule "mul_literals" (formula "3") (term "1,0,0"))
(rule "add_literals" (formula "3") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "2"))
(rule "times_zero_1" (formula "2") (term "1,0,0"))
(rule "add_literals" (formula "2") (term "0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "12") (term "0,0,0,1"))
(rule "polySimp_addComm1" (formula "12") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "7"))
(rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "12") (term "1,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,1"))
(rule "inEqSimp_sepNegMonomial0" (formula "5"))
(rule "polySimp_mulLiterals" (formula "5") (term "0"))
(rule "polySimp_elimOne" (formula "5") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "3"))
(rule "mul_literals" (formula "3") (term "1"))
(rule "inEqSimp_sepPosMonomial1" (formula "2"))
(rule "mul_literals" (formula "2") (term "1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "12") (term "0,1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "12") (term "1,0,1,0,0,1"))
(rule "mul_literals" (formula "12") (term "0,0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "12") (term "1,0,1,0,0,1"))
(rule "inEqSimp_strengthen1" (formula "7") (ifseqformula "10"))
(rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "7"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
(rule "polySimp_pullOutFactor1b" (formula "10") (term "0,0"))
(rule "add_literals" (formula "10") (term "1,1,0,0"))
(rule "times_zero_1" (formula "10") (term "1,0,0"))
(rule "add_literals" (formula "10") (term "0,0"))
(rule "leq_literals" (formula "10") (term "0"))
(builtin "One Step Simplification" (formula "10"))
(rule "false_right" (formula "10"))
(rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "3"))
(rule "polySimp_rightDist" (formula "5") (term "0,0"))
(rule "mul_literals" (formula "5") (term "0,0,0"))
(rule "polySimp_addComm1" (formula "5") (term "0"))
(rule "add_literals" (formula "5") (term "0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "5"))
(rule "polySimp_mulLiterals" (formula "5") (term "0"))
(rule "polySimp_elimOne" (formula "5") (term "0"))
(rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "3"))
(rule "polySimp_rightDist" (formula "8") (term "0,0"))
(rule "mul_literals" (formula "8") (term "0,0,0"))
(rule "polySimp_addComm1" (formula "8") (term "0"))
(rule "add_literals" (formula "8") (term "0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "8"))
(rule "polySimp_mulLiterals" (formula "8") (term "0"))
(rule "polySimp_elimOne" (formula "8") (term "0"))
(rule "nnf_notAnd" (formula "1") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0"))
(rule "ifElseUnfold" (formula "13") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x"))
(rule "compound_greater_than_comparison_2" (formula "13") (term "1") (inst "#v1=x_2") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "13") (term "1"))
(rule "variableDeclaration" (formula "13") (term "1") (newnames "x_1"))
(rule "assignment_array2" (formula "13"))
(branch "Normal Execution (A != null)"
   (builtin "One Step Simplification" (formula "13"))
   (rule "variableDeclarationAssign" (formula "13") (term "1"))
   (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_2"))
   (rule "assignment_array2" (formula "13"))
   (branch "Normal Execution (A != null)"
      (builtin "One Step Simplification" (formula "13"))
      (rule "greater_than_comparison_simple" (formula "13") (term "1"))
      (builtin "One Step Simplification" (formula "13"))
      (rule "inEqSimp_gtToGeq" (formula "13") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "0,0,1,0"))
      (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0"))
      (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0"))
      (rule "arrayLengthIsAnInt" (formula "6") (term "0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "arrayLengthNotNegative" (formula "6") (term "0"))
      (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "2"))
      (rule "leq_literals" (formula "6") (term "0"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "true_left" (formula "6"))
      (rule "ifElseSplit" (formula "13"))
      (branch "if x true"
         (builtin "One Step Simplification" (formula "14"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "assignment" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "blockEmpty" (formula "14") (term "1"))
         (rule "assignmentAdditionInt" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
         (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
         (rule "emptyModality" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "10")))
         (rule "polySimp_addAssoc" (formula "14") (term "0,1"))
         (rule "add_literals" (formula "14") (term "0,0,1"))
         (rule "add_zero_left" (formula "14") (term "0,1"))
         (rule "polySimp_addAssoc" (formula "14") (term "1"))
         (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1"))
         (rule "add_literals" (formula "14") (term "1,0,1"))
         (rule "times_zero_1" (formula "14") (term "0,1"))
         (rule "add_zero_left" (formula "14") (term "1"))
         (rule "inEqSimp_leqRight" (formula "14"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x false"
         (builtin "One Step Simplification" (formula "14"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_geqRight" (formula "12"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1"))
         (rule "polySimp_elimOne" (formula "1") (term "1"))
         (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
         (rule "compound_less_equal_than_comparison_2" (formula "14") (term "1") (inst "#v1=x_5") (inst "#v0=x_4"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_4"))
         (rule "assignment_array2" (formula "14"))
         (branch "Normal Execution (A != null)"
            (builtin "One Step Simplification" (formula "14"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_5"))
            (rule "assignment_array2" (formula "14"))
            (branch "Normal Execution (A != null)"
               (builtin "One Step Simplification" (formula "14"))
               (rule "less_equal_than_comparison_simple" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "replace_known_left" (formula "14") (term "0,0,1,0") (ifseqformula "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "ifSplit" (formula "14"))
               (branch "if x_3 true"
                  (builtin "One Step Simplification" (formula "15"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "emptyStatement" (formula "14") (term "1"))
                  (rule "blockEmpty" (formula "14") (term "1"))
                  (rule "assignmentAdditionInt" (formula "14") (term "1"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
                  (rule "emptyModality" (formula "14") (term "1"))
                  (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "10")))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,1"))
                  (rule "add_literals" (formula "14") (term "0,0,1"))
                  (rule "add_zero_left" (formula "14") (term "0,1"))
                  (rule "polySimp_addAssoc" (formula "14") (term "1"))
                  (rule "polySimp_pullOutFactor1" (formula "14") (term "0,1"))
                  (rule "add_literals" (formula "14") (term "1,0,1"))
                  (rule "times_zero_1" (formula "14") (term "0,1"))
                  (rule "add_zero_left" (formula "14") (term "1"))
                  (rule "inEqSimp_leqRight" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "qeq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_3 false"
                  (builtin "One Step Simplification" (formula "15"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Null Reference (A = null)"
               (builtin "One Step Simplification" (formula "15"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (A != null, but i Out of Bounds!)"
               (builtin "One Step Simplification" (formula "15"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
               (rule "false_right" (formula "15"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "6"))
               (rule "qeq_literals" (formula "1") (term "0,1"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
               (rule "andLeft" (formula "8"))
               (rule "inEqSimp_homoInEq1" (formula "8"))
               (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
               (rule "add_literals" (formula "8") (term "1,1,0"))
               (rule "times_zero_1" (formula "8") (term "1,0"))
               (rule "add_zero_right" (formula "8") (term "0"))
               (rule "leq_literals" (formula "8"))
               (rule "closeFalse" (formula "8"))
            )
         )
         (branch "Null Reference (A = null)"
            (builtin "One Step Simplification" (formula "15"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Index Out of Bounds (A != null, but j Out of Bounds!)"
            (rule "false_right" (formula "15"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "11"))
            (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
            (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0,0"))
            (rule "leq_literals" (formula "1") (term "0,0"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "1"))
            (rule "qeq_literals" (formula "9") (term "0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "closeFalse" (formula "9"))
         )
      )
   )
   (branch "Null Reference (A = null)"
      (builtin "One Step Simplification" (formula "14"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
      (rule "closeFalse" (formula "1"))
   )
   (branch "Index Out of Bounds (A != null, but i Out of Bounds!)"
      (builtin "One Step Simplification" (formula "14"))
      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
      (rule "false_right" (formula "14"))
      (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "1") (term "0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "1,1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "5"))
      (rule "qeq_literals" (formula "1") (term "0,1"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "1"))
      (rule "andLeft" (formula "7"))
      (rule "inEqSimp_homoInEq1" (formula "7"))
      (rule "polySimp_pullOutFactor1b" (formula "7") (term "0"))
      (rule "add_literals" (formula "7") (term "1,1,0"))
      (rule "times_zero_1" (formula "7") (term "1,0"))
      (rule "add_zero_right" (formula "7") (term "0"))
      (rule "leq_literals" (formula "7"))
      (rule "closeFalse" (formula "7"))
   )
)
(branch "Null Reference (A = null)"
   (builtin "One Step Simplification" (formula "14"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
   (rule "closeFalse" (formula "1"))
)
(branch "Index Out of Bounds (A != null, but j Out of Bounds!)"
   (rule "false_right" (formula "14"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "inEqSimp_contradInEq1" (formula "1") (term "0") (ifseqformula "10"))
   (rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
   (rule "add_literals" (formula "1") (term "1,1,0,0,0"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,0"))
   (rule "add_zero_right" (formula "1") (term "0,0,0"))
   (rule "leq_literals" (formula "1") (term "0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "inEqSimp_subsumption0" (formula "9") (ifseqformula "1"))
   (rule "leq_literals" (formula "9") (term "0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "true_left" (formula "9"))
   (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
   (rule "qeq_literals" (formula "8") (term "0"))
   (builtin "One Step Simplification" (formula "8"))
   (rule "closeFalse" (formula "8"))
)
)

}
//statementid:{18da35fc-368e-41f8-8521-c8aa52e74b45}