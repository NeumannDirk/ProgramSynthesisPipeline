(set-logic ALL)
(declare-datatype Tuple ((empty) (mkTuple (getField0 Int))))

(declare-var j_preCon Int)
(declare-var j_postCon Int)
(declare-var i_preCon Int)
(declare-var i_postCon Int)
(declare-var A_preCon (Seq Int))
(declare-var A_postCon (Seq Int))
(declare-var variantVar0 Int)

(define-fun preCondition ((j_preCon Int) (i_preCon Int) (A_preCon (Seq Int)) (variantVar0 Int)) Bool (and (and (forall ( (var_q Int)) (or (not (and (>= var_q 0) (< var_q (+ j_preCon 1)))) (>= (seq.nth A_preCon i_preCon) (seq.nth A_preCon var_q)))) (= variantVar0 (- (seq.len A_preCon) j_preCon)) (not false) (> (seq.len A_preCon) 0) (< (seq.len A_preCon) 10) (>= i_preCon 0) (< i_preCon (seq.len A_preCon)) (>= j_preCon 0) (<= j_preCon (seq.len A_preCon)) (= true true) (= true true) true)))

(define-fun postCondition ((j_postCon Int) (i_postCon Int) (A_postCon (Seq Int)) (variantVar0 Int)) Bool (and (and (forall ( (var_q Int)) (or (not (and (>= var_q 0) (< var_q j_postCon))) (>= (seq.nth A_postCon i_postCon) (seq.nth A_postCon var_q)))) (> variantVar0 (- (seq.len A_postCon) j_postCon)))))

(synth-fun targetFunction ((j Int) (i Int) (A (Seq Int))) Tuple)

(declare-var j_in Int)
(declare-var i_in Int)
(declare-var A_in (Seq Int))
(declare-var j_out Int)

(constraint (forall ((j_in Int) (i_in Int) (A_in (Seq Int)) (j_out Int) (variantVar0 Int)) (=>
	(and
		(preCondition j_in i_in A_in variantVar0)
		(= j_out (getField0 (targetFunction j_in i_in A_in)))
	)
	(and
		(postCondition j_out i_in A_in variantVar0)
	)
)))
(check-synth)