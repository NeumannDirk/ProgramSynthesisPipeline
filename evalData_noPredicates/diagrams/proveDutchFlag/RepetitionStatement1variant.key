\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Mar 13 22:18:03 CET 2024
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/DirkNeumann/eclipse-workspaces/runtime-EclipseApplication/de.tu_bs.cs.isf.corc.examples";
\include "helper.key";
\programVariables {
int[] A;
int t;
int wt;
int wb;
int bb;
int variant;
Heap heapAtPre;
}\problem {
     \forall int q;
       (  !(geq(q, Z(0(#))) & lt(q, wb))
        | int::select(heap, A, arr(q)) = Z(0(#)))
   & \forall int q;
       (  !(geq(q, wb) & lt(q, wt))
        | int::select(heap, A, arr(q)) = Z(1(#)))
   & \forall int q;
       (  !(geq(q, bb) & lt(q, length(A)))
        | int::select(heap, A, arr(q)) = Z(2(#)))
   & leq(Z(0(#)), wb)
   & leq(wb, wt)
   & leq(wt, bb)
   & leq(bb, length(A))
   & !wt = bb
   & !A = null
   & gt(length(A), Z(0(#)))
   & leq(Z(0(#)), wb)
   & leq(wb, wt)
   & leq(wt, bb)
   & leq(bb, length(A))
   & \forall int i;
       (   geq(i, Z(0(#))) & lt(i, length(A))
        ->   int::select(heap, A, arr(i)) = Z(0(#))
           | int::select(heap, A, arr(i)) = Z(1(#))
           | int::select(heap, A, arr(i)) = Z(2(#)))
   &   boolean::select(heap,
                       A,
                       java.lang.Object::<created>)
     = TRUE
   & wellFormed(heap)
-> {heapAtPre:=heap || variant:=sub(bb, wt)}
     \<{
         if (A[wt]==0) {
           t=A[wt];
           A[wt]=A[wb];
           A[wb]=t;
           wt=wt+1;
           wb=wb+1;
         }
         else 
           if (A[wt]==1) {
             wt=wt+1;
           }
           else 
             if (A[wt]==2) {
               t=A[wt];
               A[wt]=A[bb-1];
               A[bb-1]=t;
               bb=bb-1;
             }
       }\> (  lt(sub(bb, wt), variant)
            & geq(sub(bb, wt), Z(0(#))))

}

\proof {
(keyLog "0" (keyUser "DirkNeumann" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "319")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "polySimp_elimSub" (formula "14") (term "0,0"))
(rule "polySimp_elimSub" (formula "14") (term "0,1,0,1"))
(rule "polySimp_elimSub" (formula "14") (term "0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
(rule "inEqSimp_gtToGeq" (formula "4"))
(rule "times_zero_1" (formula "4") (term "1,0,0"))
(rule "add_literals" (formula "4") (term "0,0"))
(rule "inEqSimp_ltToLeq" (formula "3") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "2") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1"))
(rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1"))
(rule "polySimp_addComm1" (formula "14") (term "0,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_commuteLeq" (formula "5"))
(rule "inEqSimp_sepNegMonomial1" (formula "14") (term "1,0,1"))
(rule "polySimp_mulLiterals" (formula "14") (term "0,1,0,1"))
(rule "polySimp_elimOne" (formula "14") (term "0,1,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "4"))
(rule "mul_literals" (formula "4") (term "1"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "3") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1"))
(rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1"))
(rule "polySimp_elimOne" (formula "14") (term "0,0,0,1"))
(rule "inEqSimp_strengthen0" (formula "7") (ifseqformula "12"))
(rule "inEqSimp_contradEq3" (formula "12") (ifseqformula "7"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
(rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
(rule "add_literals" (formula "12") (term "1,1,0,0"))
(rule "times_zero_1" (formula "12") (term "1,0,0"))
(rule "add_literals" (formula "12") (term "0,0"))
(rule "qeq_literals" (formula "12") (term "0"))
(builtin "One Step Simplification" (formula "12"))
(rule "false_right" (formula "12"))
(rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
(rule "polySimp_mulComm0" (formula "6") (term "0,0"))
(rule "polySimp_addComm0" (formula "6") (term "0"))
(rule "inEqSimp_sepNegMonomial1" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "0"))
(rule "polySimp_elimOne" (formula "6") (term "0"))
(rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "6"))
(rule "times_zero_1" (formula "5") (term "0,0"))
(rule "add_zero_left" (formula "5") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "5"))
(rule "mul_literals" (formula "5") (term "1"))
(rule "nnf_imp2or" (formula "11") (term "0"))
(rule "nnf_notAnd" (formula "3") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "3") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,0,0,0"))
(rule "mul_literals" (formula "3") (term "0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "3") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "3") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "3") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "3") (term "0,0,1,0,0"))
(rule "add_literals" (formula "3") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "3") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "3") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "3") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "1") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "2") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "2") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "2") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "2") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "2") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "2") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "2") (term "0,0,1,0,0"))
(rule "add_literals" (formula "2") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "2") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "2") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "2") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "11") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "11") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "11") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "11") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "11") (term "0,0,1,0,0"))
(rule "add_literals" (formula "11") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "11") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "11") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "11") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "11") (term "0,0,0"))
(rule "times_zero_1" (formula "11") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "11") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,0"))
(rule "mul_literals" (formula "11") (term "1,0,0,0"))
(rule "shift_paren_or" (formula "11") (term "0"))
(rule "shift_paren_or" (formula "11") (term "0,0"))
(rule "ifElseUnfold" (formula "15") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x"))
(rule "compound_equality_comparison_1" (formula "15") (term "1") (inst "#v0=x_1"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x_1"))
(rule "assignment_array2" (formula "15"))
(branch "Normal Execution (A != null)"
   (builtin "One Step Simplification" (formula "15"))
   (rule "equality_comparison_simple" (formula "15") (term "1"))
   (builtin "One Step Simplification" (formula "15"))
   (rule "arrayLengthNotNegative" (formula "10") (term "0"))
   (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "4"))
   (rule "leq_literals" (formula "10") (term "0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "arrayLengthIsAnInt" (formula "10") (term "0"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "true_left" (formula "10"))
   (rule "ifElseSplit" (formula "15"))
   (branch "if x true"
      (builtin "One Step Simplification" (formula "16"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "assignment_array2" (formula "16"))
      (branch "Normal Execution (A != null)"
         (builtin "One Step Simplification" (formula "16"))
         (rule "eval_order_array_access3" (formula "16") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_arr_3"))
         (rule "assignment" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_10"))
         (rule "assignment" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_11"))
         (rule "assignment_array2" (formula "16"))
         (branch "Normal Execution (A != null)"
            (builtin "One Step Simplification" (formula "16"))
            (rule "assignment_to_primitive_array_component" (formula "16"))
            (branch "Normal Execution (x_arr_3 != null)"
               (builtin "One Step Simplification" (formula "16"))
               (rule "assignment_to_primitive_array_component" (formula "16"))
               (branch "Normal Execution (A != null)"
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "applyEq" (formula "16") (term "3,0,1,0") (ifseqformula "1"))
                  (rule "assignmentAdditionInt" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
                  (rule "assignmentAdditionInt" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "emptyModality" (formula "16") (term "1"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "16") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "16") (term "1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,1,0"))
                  (rule "add_literals" (formula "16") (term "1,1,0,1,0"))
                  (rule "times_zero_1" (formula "16") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "16") (term "0,1,0"))
                  (rule "inEqSimp_homoInEq0" (formula "16") (term "1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,1"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,1"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,1"))
                  (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                  (rule "polySimp_addComm0" (formula "16") (term "0,0,1"))
                  (rule "inEqSimp_homoInEq1" (formula "16") (term "0"))
                  (rule "polySimp_pullOutFactor1" (formula "16") (term "0,0"))
                  (rule "add_literals" (formula "16") (term "1,0,0"))
                  (rule "times_zero_1" (formula "16") (term "0,0"))
                  (rule "leq_literals" (formula "16") (term "0"))
                  (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_geqRight" (formula "16"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0"))
                  (rule "add_zero_right" (formula "1") (term "0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "1"))
                  (rule "andLeft" (formula "11"))
                  (rule "inEqSimp_homoInEq1" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0"))
                  (rule "mul_literals" (formula "11") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "11") (term "0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
                  (rule "add_literals" (formula "11") (term "1,1,0"))
                  (rule "times_zero_1" (formula "11") (term "1,0"))
                  (rule "add_zero_right" (formula "11") (term "0"))
                  (rule "leq_literals" (formula "11"))
                  (rule "closeFalse" (formula "11"))
               )
               (branch "Null Reference (A = null)"
                  (builtin "One Step Simplification" (formula "17"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "Index Out of Bounds (A != null, but wb Out of Bounds!)"
                  (builtin "One Step Simplification" (formula "17"))
                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                  (rule "false_right" (formula "17"))
                  (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                  (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "1") (term "0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
                  (rule "qeq_literals" (formula "1") (term "0,1"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "9"))
                  (rule "andLeft" (formula "12"))
                  (rule "inEqSimp_homoInEq1" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "1,1,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0"))
                  (rule "add_zero_right" (formula "12") (term "0"))
                  (rule "leq_literals" (formula "12"))
                  (rule "closeFalse" (formula "12"))
               )
            )
            (branch "Null Reference (x_arr_3 = null)"
               (builtin "One Step Simplification" (formula "17"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (x_arr_3 != null, but x_10 Out of Bounds!)"
               (rule "false_right" (formula "17"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "commute_or" (formula "1"))
               (rule "cut_direct" (formula "1") (term "1"))
               (branch "CUT: A.length <= wt TRUE"
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "12"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1"))
                  (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "11"))
                  (rule "andLeft" (formula "12"))
                  (rule "inEqSimp_homoInEq1" (formula "12"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                  (rule "mul_literals" (formula "12") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "12") (term "0"))
                  (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                  (rule "add_literals" (formula "12") (term "1,1,0"))
                  (rule "times_zero_1" (formula "12") (term "1,0"))
                  (rule "add_zero_right" (formula "12") (term "0"))
                  (rule "leq_literals" (formula "12"))
                  (rule "closeFalse" (formula "12"))
               )
               (branch "CUT: A.length <= wt FALSE"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_leqRight" (formula "16"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "2"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "11") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                  (rule "polySimp_elimOne" (formula "11") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "9"))
                  (rule "qeq_literals" (formula "11") (term "0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "closeFalse" (formula "11"))
               )
            )
         )
         (branch "Null Reference (A = null)"
            (rule "false_right" (formula "17"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
            (rule "closeFalse" (formula "1"))
         )
         (branch "Index Out of Bounds (A != null, but wb Out of Bounds!)"
            (rule "false_right" (formula "17"))
            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
            (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
            (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "1") (term "0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "1,1"))
            (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "8"))
            (rule "qeq_literals" (formula "1") (term "0,1"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
            (rule "mul_literals" (formula "6") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "6"))
            (rule "mul_literals" (formula "6") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "9") (ifseqformula "6"))
            (rule "leq_literals" (formula "9") (term "0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "true_left" (formula "9"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1"))
            (rule "polySimp_elimOne" (formula "12") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "9"))
            (rule "andLeft" (formula "12"))
            (rule "inEqSimp_homoInEq1" (formula "12"))
            (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
            (rule "polySimp_rightDist" (formula "12") (term "1,0"))
            (rule "mul_literals" (formula "12") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "12") (term "0"))
            (rule "polySimp_addComm0" (formula "12") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
            (rule "add_literals" (formula "12") (term "1,1,0"))
            (rule "times_zero_1" (formula "12") (term "1,0"))
            (rule "add_zero_right" (formula "12") (term "0"))
            (rule "leq_literals" (formula "12"))
            (rule "closeFalse" (formula "12"))
         )
      )
      (branch "Null Reference (A = null)"
         (rule "false_right" (formula "17"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (A != null, but wt Out of Bounds!)"
         (builtin "One Step Simplification" (formula "17"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
         (rule "false_right" (formula "17"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "commute_or" (formula "1"))
         (rule "cut_direct" (formula "1") (term "1"))
         (branch "CUT: A.length <= wt TRUE"
            (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "12") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "12"))
            (rule "polySimp_mulLiterals" (formula "12") (term "1"))
            (rule "polySimp_elimOne" (formula "12") (term "1"))
            (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "12"))
            (rule "andLeft" (formula "11"))
            (rule "inEqSimp_homoInEq1" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0"))
            (rule "polySimp_addComm0" (formula "11") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "times_zero_1" (formula "11") (term "1,0"))
            (rule "add_zero_right" (formula "11") (term "0"))
            (rule "leq_literals" (formula "11"))
            (rule "closeFalse" (formula "11"))
         )
         (branch "CUT: A.length <= wt FALSE"
            (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_leqRight" (formula "16"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
            (rule "polySimp_addComm0" (formula "11") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "0"))
            (rule "polySimp_elimOne" (formula "11") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "9"))
            (rule "qeq_literals" (formula "11") (term "0"))
            (builtin "One Step Simplification" (formula "11"))
            (rule "closeFalse" (formula "11"))
         )
      )
   )
   (branch "if x false"
      (builtin "One Step Simplification" (formula "16"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_2"))
      (rule "compound_equality_comparison_1" (formula "16") (term "1") (inst "#v0=x_3"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_3"))
      (rule "assignment_array2" (formula "16"))
      (branch "Normal Execution (A != null)"
         (builtin "One Step Simplification" (formula "16"))
         (rule "equality_comparison_simple" (formula "16") (term "1"))
         (builtin "One Step Simplification" (formula "16"))
         (rule "ifElseSplit" (formula "16"))
         (branch "if x_2 true"
            (builtin "One Step Simplification" (formula "17"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
            (rule "equal_literals" (formula "15"))
            (rule "false_right" (formula "15"))
            (rule "assignmentAdditionInt" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "translateJavaAddInt" (formula "16") (term "0,1,0"))
            (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
            (rule "emptyModality" (formula "16") (term "1"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,1,0"))
            (rule "polySimp_rightDist" (formula "16") (term "1,1,0"))
            (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0"))
            (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0"))
            (rule "polySimp_mulComm0" (formula "16") (term "0,1,1,0"))
            (rule "polySimp_addAssoc" (formula "16") (term "1,0"))
            (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,1,0"))
            (rule "add_literals" (formula "16") (term "1,1,0,1,0"))
            (rule "times_zero_1" (formula "16") (term "1,0,1,0"))
            (rule "add_zero_right" (formula "16") (term "0,1,0"))
            (rule "inEqSimp_homoInEq0" (formula "16") (term "1"))
            (rule "polySimp_mulComm0" (formula "16") (term "1,0,1"))
            (rule "polySimp_rightDist" (formula "16") (term "1,0,1"))
            (rule "mul_literals" (formula "16") (term "0,1,0,1"))
            (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
            (rule "polySimp_addComm0" (formula "16") (term "0,0,1"))
            (rule "inEqSimp_homoInEq1" (formula "16") (term "0"))
            (rule "polySimp_pullOutFactor1" (formula "16") (term "0,0"))
            (rule "add_literals" (formula "16") (term "1,0,0"))
            (rule "times_zero_1" (formula "16") (term "0,0"))
            (rule "leq_literals" (formula "16") (term "0"))
            (builtin "One Step Simplification" (formula "16"))
            (rule "inEqSimp_geqRight" (formula "16"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
            (rule "add_literals" (formula "1") (term "0,0,0"))
            (rule "add_zero_left" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "0"))
            (rule "polySimp_elimOne" (formula "1") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "11"))
            (rule "andLeft" (formula "1"))
            (rule "inEqSimp_homoInEq1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
            (rule "polySimp_rightDist" (formula "1") (term "1,0"))
            (rule "mul_literals" (formula "1") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "1") (term "0"))
            (rule "polySimp_addComm0" (formula "1") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
            (rule "add_literals" (formula "1") (term "1,1,0"))
            (rule "times_zero_1" (formula "1") (term "1,0"))
            (rule "add_zero_right" (formula "1") (term "0"))
            (rule "leq_literals" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_2 false"
            (builtin "One Step Simplification" (formula "17"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "ifUnfold" (formula "17") (term "1") (inst "#boolv=x"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_4"))
            (rule "compound_equality_comparison_1" (formula "17") (term "1") (inst "#v0=x_5"))
            (rule "variableDeclarationAssign" (formula "17") (term "1"))
            (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_5"))
            (rule "assignment_array2" (formula "17"))
            (branch "Normal Execution (A != null)"
               (builtin "One Step Simplification" (formula "17"))
               (rule "equality_comparison_simple" (formula "17") (term "1"))
               (builtin "One Step Simplification" (formula "17"))
               (rule "ifSplit" (formula "17"))
               (branch "if x_4 true"
                  (builtin "One Step Simplification" (formula "18"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "assignment_array2" (formula "18"))
                  (branch "Normal Execution (A != null)"
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "eval_order_array_access3" (formula "18") (term "1") (inst "#v1=x_1") (inst "#v2=x") (inst "#v0=x_arr"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_arr"))
                     (rule "assignment" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_6"))
                     (rule "assignment" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_7"))
                     (rule "eval_order_array_access5" (formula "18") (term "1") (inst "#v1=x_8") (inst "#ar1=x_arr_1"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_arr_1"))
                     (rule "assignment" (formula "18") (term "1"))
                     (builtin "One Step Simplification" (formula "18"))
                     (rule "variableDeclarationAssign" (formula "18") (term "1"))
                     (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_8"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
                     (rule "equal_literals" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "applyEq" (formula "17") (term "0,1,0,0,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "15") (term "0") (ifseqformula "1"))
                     (rule "equal_literals" (formula "15"))
                     (rule "false_right" (formula "15"))
                     (rule "assignmentSubtractionInt" (formula "16") (term "1"))
                     (builtin "One Step Simplification" (formula "16"))
                     (rule "translateJavaSubInt" (formula "16") (term "0,1,0"))
                     (rule "polySimp_elimSub" (formula "16") (term "0,1,0"))
                     (rule "mul_literals" (formula "16") (term "1,0,1,0"))
                     (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
                     (rule "assignment_array2" (formula "16"))
                     (branch "Normal Execution (x_arr_1 != null)"
                        (builtin "One Step Simplification" (formula "16"))
                        (rule "assignment_to_primitive_array_component" (formula "16"))
                        (branch "Normal Execution (x_arr != null)"
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "eval_order_array_access2" (formula "16") (term "1") (inst "#v0=x") (inst "#ar1=x_arr"))
                           (rule "variableDeclarationAssign" (formula "16") (term "1"))
                           (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_arr_2"))
                           (rule "assignment" (formula "16") (term "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "variableDeclarationAssign" (formula "16") (term "1"))
                           (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_9"))
                           (rule "assignmentSubtractionInt" (formula "16") (term "1"))
                           (builtin "One Step Simplification" (formula "16"))
                           (rule "translateJavaSubInt" (formula "16") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "16") (term "0,1,0"))
                           (rule "mul_literals" (formula "16") (term "1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
                           (rule "assignment_to_primitive_array_component" (formula "16"))
                           (branch "Normal Execution (x_arr_2 != null)"
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "assignmentSubtractionInt" (formula "16") (term "1"))
                              (builtin "One Step Simplification" (formula "16"))
                              (rule "translateJavaSubInt" (formula "16") (term "0,1,0"))
                              (rule "polySimp_elimSub" (formula "16") (term "0,1,0"))
                              (rule "mul_literals" (formula "16") (term "1,0,1,0"))
                              (rule "polySimp_addComm0" (formula "16") (term "0,1,0"))
                              (rule "emptyModality" (formula "16") (term "1"))
                              (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "10")))
                              (rule "polySimp_mulComm0" (formula "16") (term "1,1"))
                              (rule "polySimp_rightDist" (formula "16") (term "1,1"))
                              (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1"))
                              (rule "polySimp_elimOne" (formula "16") (term "1,1,1"))
                              (rule "polySimp_mulComm0" (formula "16") (term "0,1,1"))
                              (rule "polySimp_addAssoc" (formula "16") (term "0,1"))
                              (rule "add_literals" (formula "16") (term "0,0,1"))
                              (rule "add_zero_left" (formula "16") (term "0,1"))
                              (rule "polySimp_addAssoc" (formula "16") (term "1"))
                              (rule "polySimp_pullOutFactor1" (formula "16") (term "0,1"))
                              (rule "add_literals" (formula "16") (term "1,0,1"))
                              (rule "times_zero_1" (formula "16") (term "0,1"))
                              (rule "add_zero_left" (formula "16") (term "1"))
                              (rule "inEqSimp_geqRight" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "polySimp_pullOutFactor2b" (formula "1") (term "0"))
                              (rule "add_literals" (formula "1") (term "1,1,0"))
                              (rule "times_zero_1" (formula "1") (term "1,0"))
                              (rule "add_zero_right" (formula "1") (term "0"))
                              (rule "leq_literals" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Null Reference (x_arr_2 = null)"
                              (builtin "One Step Simplification" (formula "17"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Index Out of Bounds (x_arr_2 != null, but x_9 Out of Bounds!)"
                              (builtin "One Step Simplification" (formula "17"))
                              (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                              (rule "false_right" (formula "17"))
                              (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "1") (term "0,0,1"))
                              (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                              (rule "add_literals" (formula "1") (term "0,0,1"))
                              (rule "add_zero_left" (formula "1") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
                              (rule "qeq_literals" (formula "1") (term "0,1"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_contradInEq0" (formula "12") (ifseqformula "1"))
                              (rule "andLeft" (formula "12"))
                              (rule "inEqSimp_homoInEq1" (formula "12"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                              (rule "mul_literals" (formula "12") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "12") (term "0"))
                              (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                              (rule "add_literals" (formula "12") (term "1,1,0"))
                              (rule "times_zero_1" (formula "12") (term "1,0"))
                              (rule "add_zero_right" (formula "12") (term "0"))
                              (rule "leq_literals" (formula "12"))
                              (rule "closeFalse" (formula "12"))
                           )
                        )
                        (branch "Null Reference (x_arr = null)"
                           (rule "false_right" (formula "17"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Index Out of Bounds (x_arr != null, but x_6 Out of Bounds!)"
                           (builtin "One Step Simplification" (formula "17"))
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                           (rule "false_right" (formula "17"))
                           (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                           (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "1") (term "0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                           (rule "mul_literals" (formula "1") (term "1,1"))
                           (rule "commute_or" (formula "1"))
                           (rule "cut_direct" (formula "1") (term "1"))
                           (branch "CUT: A.length <= wt TRUE"
                              (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                              (rule "mul_literals" (formula "6") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "1"))
                              (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1"))
                              (rule "polySimp_elimOne" (formula "13") (term "1"))
                              (rule "inEqSimp_contradInEq0" (formula "13") (ifseqformula "12"))
                              (rule "andLeft" (formula "13"))
                              (rule "inEqSimp_homoInEq1" (formula "13"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0"))
                              (rule "mul_literals" (formula "13") (term "0,1,0"))
                              (rule "polySimp_addAssoc" (formula "13") (term "0"))
                              (rule "polySimp_addComm0" (formula "13") (term "0,0"))
                              (rule "polySimp_pullOutFactor1b" (formula "13") (term "0"))
                              (rule "add_literals" (formula "13") (term "1,1,0"))
                              (rule "times_zero_1" (formula "13") (term "1,0"))
                              (rule "add_zero_right" (formula "13") (term "0"))
                              (rule "leq_literals" (formula "13"))
                              (rule "closeFalse" (formula "13"))
                           )
                           (branch "CUT: A.length <= wt FALSE"
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_leqRight" (formula "16"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "polySimp_mulComm0" (formula "1") (term "1"))
                              (rule "polySimp_rightDist" (formula "1") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                              (rule "mul_literals" (formula "1") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                              (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "2"))
                              (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                              (rule "polySimp_addComm0" (formula "11") (term "0"))
                              (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                              (rule "polySimp_elimOne" (formula "11") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "9") (ifseqformula "11"))
                              (rule "qeq_literals" (formula "9") (term "0"))
                              (builtin "One Step Simplification" (formula "9"))
                              (rule "closeFalse" (formula "9"))
                           )
                        )
                     )
                     (branch "Null Reference (x_arr_1 = null)"
                        (builtin "One Step Simplification" (formula "17"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "Index Out of Bounds (x_arr_1 != null, but x_8 Out of Bounds!)"
                        (builtin "One Step Simplification" (formula "17"))
                        (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                        (rule "false_right" (formula "17"))
                        (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                        (rule "add_zero_right" (formula "1") (term "0,0,1"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0,1"))
                        (rule "add_literals" (formula "1") (term "0,0,1"))
                        (rule "add_zero_left" (formula "1") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (term "1") (ifseqformula "7"))
                        (rule "qeq_literals" (formula "1") (term "0,1"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "12"))
                        (rule "andLeft" (formula "1"))
                        (rule "inEqSimp_homoInEq1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "1") (term "1,0"))
                        (rule "mul_literals" (formula "1") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "1") (term "0"))
                        (rule "polySimp_addComm0" (formula "1") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                        (rule "add_literals" (formula "1") (term "1,1,0"))
                        (rule "times_zero_1" (formula "1") (term "1,0"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "leq_literals" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "Null Reference (A = null)"
                     (builtin "One Step Simplification" (formula "19"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "Index Out of Bounds (A != null, but wt Out of Bounds!)"
                     (rule "false_right" (formula "19"))
                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                     (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
                     (rule "add_zero_right" (formula "1") (term "0,0,1"))
                     (rule "applyEq" (formula "17") (term "0") (ifseqformula "2"))
                     (rule "equal_literals" (formula "17"))
                     (rule "false_right" (formula "17"))
                     (rule "applyEq" (formula "16") (term "0") (ifseqformula "2"))
                     (rule "equal_literals" (formula "16"))
                     (rule "false_right" (formula "16"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "1,1"))
                     (rule "commute_or" (formula "1"))
                     (rule "cut_direct" (formula "1") (term "1"))
                     (branch "CUT: A.length <= wt TRUE"
                        (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                        (rule "mul_literals" (formula "6") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                        (rule "mul_literals" (formula "6") (term "1"))
                        (rule "inEqSimp_exactShadow3" (formula "13") (ifseqformula "1"))
                        (rule "polySimp_mulComm0" (formula "13") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "13"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1"))
                        (rule "polySimp_elimOne" (formula "13") (term "1"))
                        (rule "inEqSimp_contradInEq1" (formula "12") (ifseqformula "13"))
                        (rule "andLeft" (formula "12"))
                        (rule "inEqSimp_homoInEq1" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0"))
                        (rule "mul_literals" (formula "12") (term "0,1,0"))
                        (rule "polySimp_addAssoc" (formula "12") (term "0"))
                        (rule "polySimp_addComm0" (formula "12") (term "0,0"))
                        (rule "polySimp_pullOutFactor1b" (formula "12") (term "0"))
                        (rule "add_literals" (formula "12") (term "1,1,0"))
                        (rule "times_zero_1" (formula "12") (term "1,0"))
                        (rule "add_zero_right" (formula "12") (term "0"))
                        (rule "leq_literals" (formula "12"))
                        (rule "closeFalse" (formula "12"))
                     )
                     (branch "CUT: A.length <= wt FALSE"
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "inEqSimp_leqRight" (formula "16"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1"))
                        (rule "polySimp_rightDist" (formula "1") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                        (rule "mul_literals" (formula "1") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                        (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "2"))
                        (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                        (rule "polySimp_addComm0" (formula "11") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "11") (ifseqformula "9"))
                        (rule "qeq_literals" (formula "11") (term "0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "closeFalse" (formula "11"))
                     )
                  )
               )
               (branch "if x_4 false"
                  (builtin "One Step Simplification" (formula "18"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "emptyModality" (formula "18") (term "1"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "polySimp_mulComm0" (formula "18") (term "1,1,0"))
                  (rule "polySimp_rightDist" (formula "18") (term "1,1,0"))
                  (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,0"))
                  (rule "polySimp_elimOne" (formula "18") (term "1,1,1,0"))
                  (rule "polySimp_mulComm0" (formula "18") (term "0,1,1,0"))
                  (rule "polySimp_addAssoc" (formula "18") (term "1,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,1,0"))
                  (rule "add_literals" (formula "18") (term "1,1,0,1,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,1,0"))
                  (rule "add_zero_right" (formula "18") (term "0,1,0"))
                  (rule "inEqSimp_homoInEq1" (formula "18") (term "0"))
                  (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0"))
                  (rule "add_literals" (formula "18") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "18") (term "1,0,0"))
                  (rule "add_zero_right" (formula "18") (term "0,0"))
                  (rule "leq_literals" (formula "18") (term "0"))
                  (builtin "One Step Simplification" (formula "18"))
                  (rule "false_right" (formula "18"))
                  (rule "allLeft" (formula "11") (inst "t=wt"))
                  (rule "replace_known_right" (formula "11") (term "1,0") (ifseqformula "16"))
                  (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "17")) (ifInst ""  (formula "15")))
                  (rule "inEqSimp_commuteGeq" (formula "11") (term "1"))
                  (rule "cut_direct" (formula "11") (term "1"))
                  (branch "CUT: A.length <= wt TRUE"
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "true_left" (formula "12"))
                     (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "11"))
                     (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "10"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1"))
                     (rule "polySimp_elimOne" (formula "10") (term "1"))
                     (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "9"))
                     (rule "andLeft" (formula "10"))
                     (rule "inEqSimp_homoInEq1" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                     (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                     (rule "mul_literals" (formula "10") (term "0,1,0"))
                     (rule "polySimp_addAssoc" (formula "10") (term "0"))
                     (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                     (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                     (rule "add_literals" (formula "10") (term "1,1,0"))
                     (rule "times_zero_1" (formula "10") (term "1,0"))
                     (rule "add_literals" (formula "10") (term "0"))
                     (rule "leq_literals" (formula "10"))
                     (rule "closeFalse" (formula "10"))
                  )
                  (branch "CUT: A.length <= wt FALSE"
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "inEqSimp_leqRight" (formula "15"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1"))
                     (rule "polySimp_rightDist" (formula "1") (term "1"))
                     (rule "mul_literals" (formula "1") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                     (rule "inEqSimp_exactShadow3" (formula "9") (ifseqformula "12"))
                     (rule "polySimp_mulComm0" (formula "9") (term "0,0"))
                     (rule "polySimp_addComm0" (formula "9") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_contradInEq0" (formula "7") (ifseqformula "9"))
                     (rule "qeq_literals" (formula "7") (term "0"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "closeFalse" (formula "7"))
                  )
               )
            )
            (branch "Null Reference (A = null)"
               (rule "false_right" (formula "18"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
               (rule "closeFalse" (formula "1"))
            )
            (branch "Index Out of Bounds (A != null, but wt Out of Bounds!)"
               (builtin "One Step Simplification" (formula "18"))
               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
               (rule "false_right" (formula "18"))
               (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
               (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
               (rule "add_zero_right" (formula "1") (term "0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
               (rule "mul_literals" (formula "1") (term "1,1"))
               (rule "commute_or" (formula "1"))
               (rule "cut_direct" (formula "1") (term "1"))
               (branch "CUT: A.length <= wt TRUE"
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "11"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1"))
                  (rule "polySimp_elimOne" (formula "11") (term "1"))
                  (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "11"))
                  (rule "andLeft" (formula "10"))
                  (rule "inEqSimp_homoInEq1" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0"))
                  (rule "mul_literals" (formula "10") (term "0,1,0"))
                  (rule "polySimp_addAssoc" (formula "10") (term "0"))
                  (rule "polySimp_addComm0" (formula "10") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "1,1,0"))
                  (rule "times_zero_1" (formula "10") (term "1,0"))
                  (rule "add_zero_right" (formula "10") (term "0"))
                  (rule "leq_literals" (formula "10"))
                  (rule "closeFalse" (formula "10"))
               )
               (branch "CUT: A.length <= wt FALSE"
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_leqRight" (formula "15"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                  (rule "mul_literals" (formula "1") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "2"))
                  (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "10") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "10"))
                  (rule "qeq_literals" (formula "8") (term "0"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "closeFalse" (formula "8"))
               )
            )
         )
      )
      (branch "Null Reference (A = null)"
         (builtin "One Step Simplification" (formula "17"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
         (rule "closeFalse" (formula "1"))
      )
      (branch "Index Out of Bounds (A != null, but wt Out of Bounds!)"
         (builtin "One Step Simplification" (formula "17"))
         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
         (rule "false_right" (formula "17"))
         (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
         (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "1") (term "0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "1,1"))
         (rule "commute_or" (formula "1"))
         (rule "cut_direct" (formula "1") (term "1"))
         (branch "CUT: A.length <= wt TRUE"
            (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
            (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "11"))
            (rule "polySimp_mulLiterals" (formula "11") (term "1"))
            (rule "polySimp_elimOne" (formula "11") (term "1"))
            (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "10"))
            (rule "andLeft" (formula "11"))
            (rule "inEqSimp_homoInEq1" (formula "11"))
            (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
            (rule "polySimp_rightDist" (formula "11") (term "1,0"))
            (rule "mul_literals" (formula "11") (term "0,1,0"))
            (rule "polySimp_addAssoc" (formula "11") (term "0"))
            (rule "polySimp_addComm0" (formula "11") (term "0,0"))
            (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
            (rule "add_literals" (formula "11") (term "1,1,0"))
            (rule "times_zero_1" (formula "11") (term "1,0"))
            (rule "add_zero_right" (formula "11") (term "0"))
            (rule "leq_literals" (formula "11"))
            (rule "closeFalse" (formula "11"))
         )
         (branch "CUT: A.length <= wt FALSE"
            (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_leqRight" (formula "15"))
            (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "polySimp_mulComm0" (formula "1") (term "1"))
            (rule "polySimp_rightDist" (formula "1") (term "1"))
            (rule "mul_literals" (formula "1") (term "0,1"))
            (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
            (rule "polySimp_elimOne" (formula "1") (term "1,1"))
            (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "2"))
            (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
            (rule "polySimp_addComm0" (formula "10") (term "0"))
            (rule "inEqSimp_sepNegMonomial1" (formula "10"))
            (rule "polySimp_mulLiterals" (formula "10") (term "0"))
            (rule "polySimp_elimOne" (formula "10") (term "0"))
            (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "10"))
            (rule "qeq_literals" (formula "8") (term "0"))
            (builtin "One Step Simplification" (formula "8"))
            (rule "closeFalse" (formula "8"))
         )
      )
   )
)
(branch "Null Reference (A = null)"
   (rule "false_right" (formula "16"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
   (rule "closeFalse" (formula "1"))
)
(branch "Index Out of Bounds (A != null, but wt Out of Bounds!)"
   (rule "false_right" (formula "16"))
   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
   (rule "inEqSimp_ltToLeq" (formula "1") (term "1"))
   (rule "times_zero_1" (formula "1") (term "1,0,0,1"))
   (rule "add_zero_right" (formula "1") (term "0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "1,1"))
   (rule "commute_or" (formula "1"))
   (rule "arrayLengthIsAnInt" (formula "11") (term "0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "arrayLengthNotNegative" (formula "11") (term "0"))
   (rule "inEqSimp_subsumption1" (formula "11") (ifseqformula "5"))
   (rule "leq_literals" (formula "11") (term "0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "true_left" (formula "11"))
   (rule "cut_direct" (formula "1") (term "1"))
   (branch "CUT: A.length <= wt TRUE"
      (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "inEqSimp_exactShadow3" (formula "11") (ifseqformula "1"))
      (rule "polySimp_mulComm0" (formula "11") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "11"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1"))
      (rule "polySimp_elimOne" (formula "11") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "11") (ifseqformula "10"))
      (rule "andLeft" (formula "11"))
      (rule "inEqSimp_homoInEq1" (formula "11"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0"))
      (rule "mul_literals" (formula "11") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "11") (term "0"))
      (rule "polySimp_addComm0" (formula "11") (term "0,0"))
      (rule "polySimp_pullOutFactor1b" (formula "11") (term "0"))
      (rule "add_literals" (formula "11") (term "1,1,0"))
      (rule "times_zero_1" (formula "11") (term "1,0"))
      (rule "add_zero_right" (formula "11") (term "0"))
      (rule "leq_literals" (formula "11"))
      (rule "closeFalse" (formula "11"))
   )
   (branch "CUT: A.length <= wt FALSE"
      (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_leqRight" (formula "15"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "2"))
      (rule "polySimp_mulComm0" (formula "10") (term "0,0"))
      (rule "polySimp_addComm0" (formula "10") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "10"))
      (rule "polySimp_mulLiterals" (formula "10") (term "0"))
      (rule "polySimp_elimOne" (formula "10") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "10") (ifseqformula "8"))
      (rule "qeq_literals" (formula "10") (term "0"))
      (builtin "One Step Simplification" (formula "10"))
      (rule "closeFalse" (formula "10"))
   )
)
)

}
//statementid:{b08d02df-e9ae-480d-9bfa-effed9ba46a5}