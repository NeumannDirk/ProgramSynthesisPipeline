\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Wed Feb 14 18:57:02 CET 2024
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "C:/Users/DirkNeumann/eclipse-workspaces/runtime-EclipseApplication/de.tu_bs.cs.isf.corc.examples";
\include "helper.key";
\programVariables {
int n;
int i;
int b;
int z;
int a;
int n;
int i;
int b;
int z;
int a;
int n_old;
int a_old;
Heap heapAtPre;
}\problem {
       mul(z, Helper::pow(heap, b, i))
     = Helper::pow(heap, a, n)
   & !i = Z(0(#))
   & mod(i, Z(2(#))) = Z(0(#))
   & gt(n, Z(0(#)))
   & gt(a, Z(0(#)))
   & lt(n, Z(6(#)))
   & lt(a, Z(6(#)))
   & geq(i, Z(0(#)))
   & lt(i, n)
   & wellFormed(heap)
-> {heapAtPre:=heap || n_old:=n || a_old:=a}
     \<{
         i=i/2;
         b=b*b;
       }\> (    mul(z, Helper::pow(heap, b, i))
              = Helper::pow(heap, a, n)
            & n = n_old
            & a = a_old)

}

\proof {
(keyLog "0" (keyUser "DirkNeumann" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "952")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "11") (term "1,0,0,1"))
(rule "eqSymm" (formula "11") (term "1,0,1"))
(rule "polySimp_mulComm0" (formula "11") (term "0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "1") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "8"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "8") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "6"))
(rule "mul_literals" (formula "6") (term "1,0,0"))
(rule "add_literals" (formula "6") (term "0,0"))
(rule "inEqSimp_ltToLeq" (formula "5"))
(rule "mul_literals" (formula "5") (term "1,0,0"))
(rule "add_literals" (formula "5") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "4"))
(rule "times_zero_1" (formula "4") (term "1,0,0"))
(rule "add_zero_right" (formula "4") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "3"))
(rule "times_zero_1" (formula "3") (term "1,0,0"))
(rule "add_zero_right" (formula "3") (term "0,0"))
(rule "mod_axiom" (formula "2") (term "0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
(rule "polySimp_sepNegMonomial" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "0"))
(rule "inEqSimp_sepNegMonomial0" (formula "8"))
(rule "polySimp_mulLiterals" (formula "8") (term "0"))
(rule "polySimp_elimOne" (formula "8") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6"))
(rule "mul_literals" (formula "6") (term "1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5"))
(rule "mul_literals" (formula "5") (term "1"))
(rule "inEqSimp_sepPosMonomial1" (formula "4"))
(rule "mul_literals" (formula "4") (term "1"))
(rule "inEqSimp_sepPosMonomial1" (formula "3"))
(rule "mul_literals" (formula "3") (term "1"))
(rule "inEqSimp_strengthen1" (formula "7") (ifseqformula "10"))
(rule "add_zero_right" (formula "7") (term "1"))
(rule "inEqSimp_contradEq7" (formula "10") (ifseqformula "7"))
(rule "times_zero_1" (formula "10") (term "1,0,0"))
(rule "add_zero_right" (formula "10") (term "0,0"))
(rule "leq_literals" (formula "10") (term "0"))
(builtin "One Step Simplification" (formula "10"))
(rule "false_right" (formula "10"))
(rule "newSym_eq" (formula "2") (inst "l=l_0") (inst "newSymDef=mul(i, Z(0(#)))"))
(rule "times_zero_1" (formula "2") (term "1,1"))
(rule "add_zero_right" (formula "2") (term "1"))
(rule "applyEq" (formula "3") (term "0,0") (ifseqformula "2"))
(rule "eqSymm" (formula "3"))
(rule "applyEq" (formula "1") (term "2,0,0") (ifseqformula "3"))
(rule "applyEq" (formula "8") (term "0") (ifseqformula "3"))
(rule "applyEq" (formula "2") (term "0,0") (ifseqformula "3"))
(rule "applyEq" (formula "9") (term "1,1") (ifseqformula "3"))
(rule "elimGcdGeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
(rule "leq_literals" (formula "8") (term "0,0"))
(builtin "One Step Simplification" (formula "8"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
(rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
(rule "add_literals" (formula "8") (term "0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
(rule "add_literals" (formula "8") (term "1,1,0,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0"))
(rule "leq_literals" (formula "8") (term "0"))
(builtin "One Step Simplification" (formula "8"))
(rule "polyDiv_pullOut" (formula "2") (term "0") (inst "polyDivCoeff=l_0"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,0,0,2,0"))
(rule "equal_literals" (formula "2") (term "0,0"))
(builtin "One Step Simplification" (formula "2"))
(rule "polySimp_homoEq" (formula "2"))
(rule "polySimp_pullOutFactor0" (formula "2") (term "0,0,0,1,0"))
(rule "add_literals" (formula "2") (term "1,0,0,0,1,0"))
(rule "times_zero_1" (formula "2") (term "0,0,0,1,0"))
(rule "div_literals" (formula "2") (term "0,0,1,0"))
(rule "add_zero_left" (formula "2") (term "0,1,0"))
(rule "polySimp_pullOutFactor1" (formula "2") (term "0"))
(rule "add_literals" (formula "2") (term "1,0"))
(rule "times_zero_1" (formula "2") (term "0"))
(builtin "One Step Simplification" (formula "2"))
(rule "true_left" (formula "2"))
(rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "5"))
(rule "polySimp_rightDist" (formula "8") (term "0,0"))
(rule "mul_literals" (formula "8") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "8") (term "0"))
(rule "add_literals" (formula "8") (term "0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "8"))
(rule "polySimp_mulLiterals" (formula "8") (term "0"))
(rule "elimGcdLeq_antec" (formula "8") (inst "elimGcdRightDiv=Z(2(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
(rule "leq_literals" (formula "8") (term "0,0"))
(builtin "One Step Simplification" (formula "8"))
(rule "neg_literal" (formula "8") (term "0,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0,0,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,0,0"))
(rule "mul_literals" (formula "8") (term "1,0,0,0,0,0"))
(rule "polySimp_addLiterals" (formula "8") (term "0,0,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0,0,0"))
(rule "polySimp_pullOutFactor0b" (formula "8") (term "0,0"))
(rule "add_literals" (formula "8") (term "1,1,0,0"))
(rule "times_zero_1" (formula "8") (term "1,0,0"))
(rule "add_zero_right" (formula "8") (term "0,0"))
(rule "qeq_literals" (formula "8") (term "0"))
(builtin "One Step Simplification" (formula "8"))
(rule "assignmentDivisionInt" (formula "11"))
(branch
   (builtin "One Step Simplification" (formula "11"))
   (rule "translateJavaDivInt" (formula "11") (term "0,1,0"))
   (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "2"))
   (rule "assignmentMultiplicationInt" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "translateJavaMulInt" (formula "11") (term "0,1,0"))
   (rule "emptyModality" (formula "11") (term "1"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "jdiv_axiom" (formula "11") (term "2,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,0,2,1"))
   (rule "eqSymm" (formula "1"))
   (rule "inEqSimp_subsumption6" (formula "1") (term "0,0") (ifseqformula "8"))
   (rule "greater_literals" (formula "1") (term "0,0,0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "mul_literals" (formula "1") (term "1,0,0,0"))
   (rule "leq_literals" (formula "1") (term "0,0,0"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "eqSymm" (formula "1"))
   (rule "applyEq" (formula "12") (term "2,0,0") (ifseqformula "1"))
   (rule "polyDiv_pullOut" (formula "12") (term "2,0,0") (inst "polyDivCoeff=l_0"))
   (rule "equal_literals" (formula "12") (term "0,2,0,0"))
   (builtin "One Step Simplification" (formula "12"))
   (rule "polySimp_mulLiterals" (formula "12") (term "1,0,0,2,0,0"))
   (rule "polySimp_pullOutFactor0" (formula "12") (term "0,0,2,0,0"))
   (rule "add_literals" (formula "12") (term "1,0,0,2,0,0"))
   (rule "times_zero_1" (formula "12") (term "0,0,2,0,0"))
   (rule "div_literals" (formula "12") (term "0,2,0,0"))
   (rule "add_zero_left" (formula "12") (term "2,0,0"))
   (rule "polyDiv_pullOut" (formula "1") (term "1") (inst "polyDivCoeff=l_0"))
   (rule "equal_literals" (formula "1") (term "0,1"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,0,0,1"))
   (rule "polySimp_pullOutFactor0" (formula "1") (term "0,0,1"))
   (rule "add_literals" (formula "1") (term "1,0,0,1"))
   (rule "times_zero_1" (formula "1") (term "0,0,1"))
   (rule "div_literals" (formula "1") (term "0,1"))
   (rule "add_zero_left" (formula "1") (term "1"))
   (builtin "Evaluate Query" (formula "2") (term "1") (newnames "a_0,b_0,callee,queryResult,res_pow"))
   (rule "replaceKnownQuery_Helper_pow(heap,a,n)_0_0" (formula "13") (term "1"))
   (rule "replaceKnownQuery_Helper_pow(heap,a,n)_0_0" (formula "3") (term "1"))
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "12") (term "0,0,1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "queryResult"))
   (builtin "Evaluate Query" (formula "2") (term "0,0") (newnames "a_1,b_1,callee,queryResult_0,res_pow_0"))
   (rule "replaceKnownQuery_Helper_pow(heap,b,mul(l_0,Z(2(#))))_0_1" (formula "3") (term "0,0"))
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "12") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "2") (term "0"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "queryResult_0"))
   (builtin "Evaluate Query" (formula "14") (term "0,0") (newnames "a_2,b_2,callee,queryResult_1,res_pow_1"))
   (rule "replaceKnownQuery_Helper_pow(heap,mul(b,b),l_0)_0_2" (formula "15") (term "0,0"))
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "12") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "0"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "queryResult_1"))
   (rule "methodCallWithAssignmentWithinClass" (formula "14") (term "1") (inst "#v0=x"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "a_3"))
   (rule "assignment" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "variableDeclarationAssign" (formula "14") (term "1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "b_3"))
   (rule "assignment" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_pow,savedHeapBefore_pow"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x_1"))
   (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_1"))
   (rule "equality_comparison_simple" (formula "14") (term "1"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "inEqSimp_contradEq7" (formula "14") (term "0,0,1,0") (ifseqformula "4"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,0,1,0"))
   (rule "leq_literals" (formula "14") (term "0,0,0,1,0"))
   (builtin "One Step Simplification" (formula "14"))
   (rule "ifSplit" (formula "14"))
   (branch "if x_1 true"
      (builtin "One Step Simplification" (formula "15"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "if x_1 false"
      (builtin "One Step Simplification" (formula "15"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "res"))
      (rule "assignment" (formula "14") (term "1"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "for_to_while" (formula "14") (term "1") (inst "#outerLabel=_label1") (inst "#innerLabel=_label0"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "i_1"))
      (rule "assignment" (formula "14") (term "1"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "loopUnwind" (formula "14") (term "1") (inst "#outerLabel=_label3") (inst "#innerLabel=_label2"))
      (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x_1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_2"))
      (rule "compound_less_than_comparison_2" (formula "14") (term "1") (inst "#v1=x_4") (inst "#v0=x_3"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_3"))
      (rule "assignment" (formula "14") (term "1"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "variableDeclarationAssign" (formula "14") (term "1"))
      (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_4"))
      (rule "assignmentSubtractionInt" (formula "14") (term "1"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "translateJavaSubInt" (formula "14") (term "0,1,0"))
      (rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
      (rule "mul_literals" (formula "14") (term "1,0,1,0"))
      (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
      (rule "less_than_comparison_simple" (formula "14") (term "1"))
      (builtin "One Step Simplification" (formula "14"))
      (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,0"))
      (rule "add_zero_right" (formula "14") (term "0,0,0,1,0"))
      (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,0"))
      (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,0"))
      (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,1,0"))
      (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
      (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
      (rule "ifSplit" (formula "14"))
      (branch "if x_2 true"
         (builtin "One Step Simplification" (formula "15"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "inEqSimp_subsumption1" (formula "5") (ifseqformula "1"))
         (rule "leq_literals" (formula "5") (term "0"))
         (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "compound_assignment_op_mul" (formula "14") (term "1"))
         (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x_1"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_5"))
         (rule "remove_parentheses_right" (formula "14") (term "1"))
         (rule "compound_multiplication_2" (formula "14") (term "1") (inst "#v1=x_7") (inst "#v0=x_6"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_6"))
         (rule "assignment" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_7"))
         (rule "remove_parentheses_right" (formula "14") (term "1"))
         (rule "assignment" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "assignmentMultiplicationInt" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaMulInt" (formula "14") (term "0,1,0"))
         (rule "widening_identity_cast_5" (formula "14") (term "1"))
         (rule "assignment" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "blockEmpty" (formula "14") (term "1"))
         (rule "postincrement" (formula "14") (term "1"))
         (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x_1"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_8"))
         (rule "remove_parentheses_right" (formula "14") (term "1"))
         (rule "assignmentAdditionInt" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
         (rule "add_zero_left" (formula "14") (term "0,1,0"))
         (rule "widening_identity_cast_5" (formula "14") (term "1"))
         (rule "assignment" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "blockEmpty" (formula "14") (term "1"))
         (rule "loopUnwind" (formula "14") (term "1") (inst "#outerLabel=_label5") (inst "#innerLabel=_label4"))
         (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x_1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_9"))
         (rule "compound_less_than_comparison_2" (formula "14") (term "1") (inst "#v1=x_11") (inst "#v0=x_10"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_10"))
         (rule "assignment" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "variableDeclarationAssign" (formula "14") (term "1"))
         (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_11"))
         (rule "assignmentSubtractionInt" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "translateJavaSubInt" (formula "14") (term "0,1,0"))
         (rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
         (rule "mul_literals" (formula "14") (term "1,0,1,0"))
         (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
         (rule "less_than_comparison_simple" (formula "14") (term "1"))
         (builtin "One Step Simplification" (formula "14"))
         (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,0"))
         (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,1,0"))
         (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,1,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0"))
         (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,0"))
         (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
         (rule "ifSplit" (formula "14"))
         (branch "if x_9 true"
            (builtin "One Step Simplification" (formula "15"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
            (rule "leq_literals" (formula "2") (term "0"))
            (builtin "One Step Simplification" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "compound_assignment_op_mul" (formula "14") (term "1"))
            (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x_1"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_12"))
            (rule "remove_parentheses_right" (formula "14") (term "1"))
            (rule "compound_multiplication_2" (formula "14") (term "1") (inst "#v1=x_14") (inst "#v0=x_13"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_13"))
            (rule "assignment" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_14"))
            (rule "remove_parentheses_right" (formula "14") (term "1"))
            (rule "assignment" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "assignmentMultiplicationInt" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaMulInt" (formula "14") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "14") (term "1"))
            (rule "assignment" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "blockEmpty" (formula "14") (term "1"))
            (rule "postincrement" (formula "14") (term "1"))
            (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x_1"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_15"))
            (rule "remove_parentheses_right" (formula "14") (term "1"))
            (rule "assignmentAdditionInt" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
            (rule "add_literals" (formula "14") (term "0,1,0"))
            (rule "widening_identity_cast_5" (formula "14") (term "1"))
            (rule "assignment" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "blockEmpty" (formula "14") (term "1"))
            (rule "loopUnwind" (formula "14") (term "1") (inst "#outerLabel=_label7") (inst "#innerLabel=_label6"))
            (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x_1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_16"))
            (rule "compound_less_than_comparison_2" (formula "14") (term "1") (inst "#v1=x_18") (inst "#v0=x_17"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_17"))
            (rule "assignment" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "variableDeclarationAssign" (formula "14") (term "1"))
            (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_18"))
            (rule "assignmentSubtractionInt" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "translateJavaSubInt" (formula "14") (term "0,1,0"))
            (rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
            (rule "mul_literals" (formula "14") (term "1,0,1,0"))
            (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
            (rule "less_than_comparison_simple" (formula "14") (term "1"))
            (builtin "One Step Simplification" (formula "14"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,0"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,1,0"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,1,0"))
            (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,1,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0"))
            (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,0"))
            (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
            (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0"))
            (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
            (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
            (rule "ifSplit" (formula "14"))
            (branch "if x_16 true"
               (builtin "One Step Simplification" (formula "15"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
               (rule "leq_literals" (formula "2") (term "0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "compound_assignment_op_mul" (formula "14") (term "1"))
               (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x_1"))
               (rule "variableDeclarationAssign" (formula "14") (term "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_36"))
               (rule "remove_parentheses_right" (formula "14") (term "1"))
               (rule "compound_multiplication_2" (formula "14") (term "1") (inst "#v1=x_38") (inst "#v0=x_37"))
               (rule "variableDeclarationAssign" (formula "14") (term "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_37"))
               (rule "assignment" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "variableDeclarationAssign" (formula "14") (term "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_38"))
               (rule "remove_parentheses_right" (formula "14") (term "1"))
               (rule "assignment" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "assignmentMultiplicationInt" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "translateJavaMulInt" (formula "14") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "14") (term "1"))
               (rule "assignment" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "blockEmpty" (formula "14") (term "1"))
               (rule "postincrement" (formula "14") (term "1"))
               (rule "compound_int_cast_expression" (formula "14") (term "1") (inst "#v=x_1"))
               (rule "variableDeclarationAssign" (formula "14") (term "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_39"))
               (rule "remove_parentheses_right" (formula "14") (term "1"))
               (rule "assignmentAdditionInt" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "translateJavaAddInt" (formula "14") (term "0,1,0"))
               (rule "add_literals" (formula "14") (term "0,1,0"))
               (rule "widening_identity_cast_5" (formula "14") (term "1"))
               (rule "assignment" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "blockEmpty" (formula "14") (term "1"))
               (rule "loopUnwind" (formula "14") (term "1") (inst "#outerLabel=_label19") (inst "#innerLabel=_label18"))
               (rule "ifUnfold" (formula "14") (term "1") (inst "#boolv=x_1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_40"))
               (rule "compound_less_than_comparison_2" (formula "14") (term "1") (inst "#v1=x_42") (inst "#v0=x_41"))
               (rule "variableDeclarationAssign" (formula "14") (term "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_41"))
               (rule "assignment" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "variableDeclarationAssign" (formula "14") (term "1"))
               (rule "variableDeclaration" (formula "14") (term "1") (newnames "x_42"))
               (rule "assignmentSubtractionInt" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "translateJavaSubInt" (formula "14") (term "0,1,0"))
               (rule "polySimp_elimSub" (formula "14") (term "0,1,0"))
               (rule "mul_literals" (formula "14") (term "1,0,1,0"))
               (rule "polySimp_addComm0" (formula "14") (term "0,1,0"))
               (rule "less_than_comparison_simple" (formula "14") (term "1"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,0,1,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0,0,0,1,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0"))
               (rule "polySimp_addComm1" (formula "14") (term "0,0,0,1,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,0,1,0"))
               (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "14") (term "0,0,0,1,0"))
               (rule "ifSplit" (formula "14"))
               (branch "if x_40 true"
                  (builtin "One Step Simplification" (formula "15"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                  (rule "leq_literals" (formula "2") (term "0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "6"))
                  (rule "applyEq" (formula "15") (term "0,1,0,0,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "applyEq" (formula "10") (term "0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "10"))
                  (rule "mul_literals" (formula "10") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "10") (term "0"))
                  (rule "add_literals" (formula "10") (term "0,0"))
                  (rule "applyEq" (formula "6") (term "0") (ifseqformula "1"))
                  (rule "leq_literals" (formula "6"))
                  (rule "true_left" (formula "6"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "1"))
                  (rule "inEqSimp_subsumption4" (formula "9") (ifseqformula "8"))
                  (rule "greater_literals" (formula "9") (term "0,0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "0,0"))
                  (rule "leq_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "compound_assignment_op_mul" (formula "12") (term "1"))
                  (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=x_1"))
                  (rule "variableDeclarationAssign" (formula "12") (term "1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_60"))
                  (rule "remove_parentheses_right" (formula "12") (term "1"))
                  (rule "compound_multiplication_2" (formula "12") (term "1") (inst "#v1=x_62") (inst "#v0=x_61"))
                  (rule "variableDeclarationAssign" (formula "12") (term "1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_61"))
                  (rule "assignment" (formula "12") (term "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "variableDeclarationAssign" (formula "12") (term "1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_62"))
                  (rule "remove_parentheses_right" (formula "12") (term "1"))
                  (rule "assignment" (formula "12") (term "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "assignmentMultiplicationInt" (formula "12") (term "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "translateJavaMulInt" (formula "12") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "12") (term "1"))
                  (rule "assignment" (formula "12") (term "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "blockEmpty" (formula "12") (term "1"))
                  (rule "postincrement" (formula "12") (term "1"))
                  (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=x_1"))
                  (rule "variableDeclarationAssign" (formula "12") (term "1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_63"))
                  (rule "remove_parentheses_right" (formula "12") (term "1"))
                  (rule "assignmentAdditionInt" (formula "12") (term "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "translateJavaAddInt" (formula "12") (term "0,1,0"))
                  (rule "add_literals" (formula "12") (term "0,1,0"))
                  (rule "widening_identity_cast_5" (formula "12") (term "1"))
                  (rule "assignment" (formula "12") (term "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "blockEmpty" (formula "12") (term "1"))
                  (rule "loopUnwind" (formula "12") (term "1") (inst "#outerLabel=_label31") (inst "#innerLabel=_label30"))
                  (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_64"))
                  (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_66") (inst "#v0=x_65"))
                  (rule "variableDeclarationAssign" (formula "12") (term "1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_65"))
                  (rule "assignment" (formula "12") (term "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "variableDeclarationAssign" (formula "12") (term "1"))
                  (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_66"))
                  (rule "assignmentSubtractionInt" (formula "12") (term "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "translateJavaSubInt" (formula "12") (term "0,1,0"))
                  (rule "sub_literals" (formula "12") (term "0,1,0"))
                  (rule "less_than_comparison_simple" (formula "12") (term "1"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "less_literals" (formula "12") (term "0,0,1,0"))
                  (builtin "One Step Simplification" (formula "12"))
                  (rule "ifSplit" (formula "12"))
                  (branch "if x_64 true"
                     (builtin "One Step Simplification" (formula "13"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if x_64 false"
                     (builtin "One Step Simplification" (formula "13"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "blockEmpty" (formula "12") (term "1"))
                     (rule "methodCallReturn" (formula "12") (term "1"))
                     (rule "assignment" (formula "12") (term "1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "methodCallEmpty" (formula "12") (term "1"))
                     (rule "blockEmpty" (formula "12") (term "1"))
                     (rule "assignment" (formula "12") (term "1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "methodCallEmpty" (formula "12") (term "1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "emptyModality" (formula "12") (term "1"))
                     (builtin "One Step Simplification" (formula "12"))
                     (rule "notRight" (formula "12"))
                     (rule "eqSymm" (formula "1"))
                     (rule "add_non_neg_square" (inst "squareFac=a"))
                     (rule "divide_inEq2" (formula "1") (inst "divY=a") (ifseqformula "7"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "add_zero_left" (formula "1") (term "0,0,1,1"))
                     (rule "leq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "sub_literals" (formula "1") (term "0,1"))
                     (rule "div_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "8"))
                     (rule "leq_literals" (formula "1") (term "0"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "methodCallWithAssignmentWithinClass" (formula "13") (term "1") (inst "#v0=x"))
                     (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_67"))
                     (rule "variableDeclarationAssign" (formula "13") (term "1"))
                     (rule "variableDeclaration" (formula "13") (term "1") (newnames "a_8"))
                     (rule "assignment" (formula "13") (term "1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "variableDeclarationAssign" (formula "13") (term "1"))
                     (rule "variableDeclaration" (formula "13") (term "1") (newnames "b_8"))
                     (rule "assignment" (formula "13") (term "1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "methodBodyExpand" (formula "13") (term "1") (newnames "heapBefore_pow_4,savedHeapBefore_pow_4"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=x_68"))
                     (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_68"))
                     (rule "equality_comparison_simple" (formula "13") (term "1"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "elimGcdEq" (formula "13") (term "0,0,1,0") (inst "elimGcdRightDiv=Z(0(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0"))
                     (rule "add_zero_left" (formula "13") (term "0,1,0,0,0,1,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,1,0"))
                     (rule "add_literals" (formula "13") (term "1,0,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "13") (term "0,0,1,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "times_zero_1" (formula "13") (term "0,1,0,0,0,1,0"))
                     (rule "times_zero_1" (formula "13") (term "0,0,0,0,0,1,0"))
                     (rule "qeq_literals" (formula "13") (term "1,0,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "leq_literals" (formula "13") (term "0,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_contradEq7" (formula "13") (term "0,0,1,0") (ifseqformula "9"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,1,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0,1,0"))
                     (rule "leq_literals" (formula "13") (term "0,0,0,1,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "ifSplit" (formula "13"))
                     (branch "if x_68 true"
                        (builtin "One Step Simplification" (formula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_68 false"
                        (builtin "One Step Simplification" (formula "14"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "variableDeclarationAssign" (formula "13") (term "1"))
                        (rule "variableDeclaration" (formula "13") (term "1") (newnames "res_5"))
                        (rule "assignment" (formula "13") (term "1"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "for_to_while" (formula "13") (term "1") (inst "#outerLabel=_label33") (inst "#innerLabel=_label32"))
                        (rule "variableDeclarationAssign" (formula "13") (term "1"))
                        (rule "variableDeclaration" (formula "13") (term "1") (newnames "i_6"))
                        (rule "assignment" (formula "13") (term "1"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "loopUnwind" (formula "13") (term "1") (inst "#outerLabel=_label35") (inst "#innerLabel=_label34"))
                        (rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=x_68"))
                        (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_69"))
                        (rule "compound_less_than_comparison_2" (formula "13") (term "1") (inst "#v1=x_71") (inst "#v0=x_70"))
                        (rule "variableDeclarationAssign" (formula "13") (term "1"))
                        (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_70"))
                        (rule "assignment" (formula "13") (term "1"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "variableDeclarationAssign" (formula "13") (term "1"))
                        (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_71"))
                        (rule "assignmentSubtractionInt" (formula "13") (term "1"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "translateJavaSubInt" (formula "13") (term "0,1,0"))
                        (rule "polySimp_elimSub" (formula "13") (term "0,1,0"))
                        (rule "mul_literals" (formula "13") (term "1,0,1,0"))
                        (rule "polySimp_addComm0" (formula "13") (term "0,1,0"))
                        (rule "less_than_comparison_simple" (formula "13") (term "1"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0"))
                        (rule "add_zero_right" (formula "13") (term "0,0,0,1,0"))
                        (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,1,0"))
                        (rule "mul_literals" (formula "13") (term "0,1,0,0,0,1,0"))
                        (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,1,0"))
                        (rule "add_literals" (formula "13") (term "0,0,0,0,1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0"))
                        (rule "inEqSimp_subsumption6" (formula "13") (term "0,0,1,0") (ifseqformula "9"))
                        (rule "mul_literals" (formula "13") (term "1,1,0,0,0,1,0"))
                        (rule "greater_literals" (formula "13") (term "0,0,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "leq_literals" (formula "13") (term "0,0,0,1,0"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "ifSplit" (formula "13"))
                        (branch "if x_69 true"
                           (builtin "One Step Simplification" (formula "14"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "compound_assignment_op_mul" (formula "13") (term "1"))
                           (rule "compound_int_cast_expression" (formula "13") (term "1") (inst "#v=x_68"))
                           (rule "variableDeclarationAssign" (formula "13") (term "1"))
                           (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_72"))
                           (rule "remove_parentheses_right" (formula "13") (term "1"))
                           (rule "compound_multiplication_2" (formula "13") (term "1") (inst "#v1=x_74") (inst "#v0=x_73"))
                           (rule "variableDeclarationAssign" (formula "13") (term "1"))
                           (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_73"))
                           (rule "assignment" (formula "13") (term "1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "variableDeclarationAssign" (formula "13") (term "1"))
                           (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_74"))
                           (rule "remove_parentheses_right" (formula "13") (term "1"))
                           (rule "assignment" (formula "13") (term "1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "assignmentMultiplicationInt" (formula "13") (term "1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "translateJavaMulInt" (formula "13") (term "0,1,0"))
                           (rule "widening_identity_cast_5" (formula "13") (term "1"))
                           (rule "assignment" (formula "13") (term "1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "blockEmpty" (formula "13") (term "1"))
                           (rule "postincrement" (formula "13") (term "1"))
                           (rule "compound_int_cast_expression" (formula "13") (term "1") (inst "#v=x_68"))
                           (rule "variableDeclarationAssign" (formula "13") (term "1"))
                           (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_75"))
                           (rule "remove_parentheses_right" (formula "13") (term "1"))
                           (rule "assignmentAdditionInt" (formula "13") (term "1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "translateJavaAddInt" (formula "13") (term "0,1,0"))
                           (rule "add_zero_left" (formula "13") (term "0,1,0"))
                           (rule "widening_identity_cast_5" (formula "13") (term "1"))
                           (rule "assignment" (formula "13") (term "1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "blockEmpty" (formula "13") (term "1"))
                           (rule "loopUnwind" (formula "13") (term "1") (inst "#outerLabel=_label37") (inst "#innerLabel=_label36"))
                           (rule "ifUnfold" (formula "13") (term "1") (inst "#boolv=x_68"))
                           (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_76"))
                           (rule "compound_less_than_comparison_2" (formula "13") (term "1") (inst "#v1=x_78") (inst "#v0=x_77"))
                           (rule "variableDeclarationAssign" (formula "13") (term "1"))
                           (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_77"))
                           (rule "assignment" (formula "13") (term "1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "variableDeclarationAssign" (formula "13") (term "1"))
                           (rule "variableDeclaration" (formula "13") (term "1") (newnames "x_78"))
                           (rule "assignmentSubtractionInt" (formula "13") (term "1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "translateJavaSubInt" (formula "13") (term "0,1,0"))
                           (rule "polySimp_elimSub" (formula "13") (term "0,1,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,1,0"))
                           (rule "polySimp_addComm0" (formula "13") (term "0,1,0"))
                           (rule "less_than_comparison_simple" (formula "13") (term "1"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1,0"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,0,0,1,0"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0,0,1,0"))
                           (rule "polySimp_addAssoc" (formula "13") (term "0,0,0,0,1,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0"))
                           (rule "polySimp_addComm1" (formula "13") (term "0,0,0,1,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,1,0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13") (term "0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,1,0"))
                           (rule "elimGcdGeq" (formula "13") (term "0,0,1,0") (inst "elimGcdRightDiv=Z(2(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                           (rule "sub_literals" (formula "13") (term "0,0,0,0,0,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,0,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0,0,0,0,1,0,0,0,1,0"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,0,1,0,0,0,1,0"))
                           (rule "mul_literals" (formula "13") (term "1,0,0,0,0,0,0,0,0,1,0"))
                           (rule "mul_literals" (formula "13") (term "0,0,0,0,1,0,0,0,1,0"))
                           (rule "polySimp_addLiterals" (formula "13") (term "0,0,0,0,0,0,0,1,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0,1,0"))
                           (rule "add_literals" (formula "13") (term "0,0,0,0,0,0,0,1,0"))
                           (rule "add_zero_left" (formula "13") (term "0,0,0,0,0,0,1,0"))
                           (rule "polySimp_pullOutFactor0b" (formula "13") (term "0,1,0,0,0,1,0"))
                           (rule "add_literals" (formula "13") (term "1,1,0,1,0,0,0,1,0"))
                           (rule "times_zero_1" (formula "13") (term "1,0,1,0,0,0,1,0"))
                           (rule "add_zero_right" (formula "13") (term "0,1,0,0,0,1,0"))
                           (rule "leq_literals" (formula "13") (term "1,0,0,0,1,0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "polySimp_pullOutFactor0" (formula "13") (term "0,0,0,0,1,0"))
                           (rule "add_literals" (formula "13") (term "1,0,0,0,0,1,0"))
                           (rule "times_zero_1" (formula "13") (term "0,0,0,0,1,0"))
                           (rule "qeq_literals" (formula "13") (term "0,0,0,1,0"))
                           (builtin "One Step Simplification" (formula "13"))
                           (rule "ifSplit" (formula "13"))
                           (branch "if x_76 true"
                              (builtin "One Step Simplification" (formula "14"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "1"))
                              (rule "leq_literals" (formula "10") (term "0"))
                              (builtin "One Step Simplification" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "10"))
                              (rule "applyEqRigid" (formula "14") (term "0,0,1,0,0,0") (ifseqformula "1"))
                              (rule "mul_literals" (formula "14") (term "0,1,0,0,0"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "applyEq" (formula "10") (term "0") (ifseqformula "1"))
                              (rule "leq_literals" (formula "10"))
                              (rule "true_left" (formula "10"))
                              (rule "applyEq" (formula "5") (term "0,0,0") (ifseqformula "1"))
                              (rule "mul_literals" (formula "5") (term "0,0"))
                              (rule "jdiv_axiom_inline" (formula "5") (term "0"))
                              (rule "div_literals" (formula "5") (term "1,0"))
                              (rule "mul_literals" (formula "5") (term "0,0,2,0"))
                              (rule "qeq_literals" (formula "5") (term "0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "eqSymm" (formula "5"))
                              (rule "applyEqRigid" (formula "10") (term "0,1,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "6") (term "0,1") (ifseqformula "1"))
                              (rule "mul_literals" (formula "6") (term "1"))
                              (rule "compound_assignment_op_mul" (formula "11") (term "1"))
                              (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x_68"))
                              (rule "variableDeclarationAssign" (formula "11") (term "1"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_84"))
                              (rule "remove_parentheses_right" (formula "11") (term "1"))
                              (rule "compound_multiplication_2" (formula "11") (term "1") (inst "#v1=x_86") (inst "#v0=x_85"))
                              (rule "variableDeclarationAssign" (formula "11") (term "1"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_85"))
                              (rule "assignment" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "variableDeclarationAssign" (formula "11") (term "1"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_86"))
                              (rule "remove_parentheses_right" (formula "11") (term "1"))
                              (rule "assignment" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "assignmentMultiplicationInt" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "translateJavaMulInt" (formula "11") (term "0,1,0"))
                              (rule "widening_identity_cast_5" (formula "11") (term "1"))
                              (rule "assignment" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "blockEmpty" (formula "11") (term "1"))
                              (rule "postincrement" (formula "11") (term "1"))
                              (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x_68"))
                              (rule "variableDeclarationAssign" (formula "11") (term "1"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_87"))
                              (rule "remove_parentheses_right" (formula "11") (term "1"))
                              (rule "assignmentAdditionInt" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "translateJavaAddInt" (formula "11") (term "0,1,0"))
                              (rule "add_literals" (formula "11") (term "0,1,0"))
                              (rule "widening_identity_cast_5" (formula "11") (term "1"))
                              (rule "assignment" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "blockEmpty" (formula "11") (term "1"))
                              (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label43") (inst "#innerLabel=_label42"))
                              (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x_68"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_88"))
                              (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_90") (inst "#v0=x_89"))
                              (rule "variableDeclarationAssign" (formula "11") (term "1"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_89"))
                              (rule "assignment" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "variableDeclarationAssign" (formula "11") (term "1"))
                              (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_90"))
                              (rule "assignmentSubtractionInt" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "translateJavaSubInt" (formula "11") (term "0,1,0"))
                              (rule "sub_literals" (formula "11") (term "0,1,0"))
                              (rule "less_than_comparison_simple" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "less_literals" (formula "11") (term "0,0,1,0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "ifSplit" (formula "11"))
                              (branch "if x_88 true"
                                 (builtin "One Step Simplification" (formula "12"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "compound_assignment_op_mul" (formula "11") (term "1"))
                                 (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x_68"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_91"))
                                 (rule "remove_parentheses_right" (formula "11") (term "1"))
                                 (rule "compound_multiplication_2" (formula "11") (term "1") (inst "#v1=x_93") (inst "#v0=x_92"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_92"))
                                 (rule "assignment" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_93"))
                                 (rule "remove_parentheses_right" (formula "11") (term "1"))
                                 (rule "assignment" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "assignmentMultiplicationInt" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaMulInt" (formula "11") (term "0,1,0"))
                                 (rule "widening_identity_cast_5" (formula "11") (term "1"))
                                 (rule "assignment" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "blockEmpty" (formula "11") (term "1"))
                                 (rule "postincrement" (formula "11") (term "1"))
                                 (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x_68"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_94"))
                                 (rule "remove_parentheses_right" (formula "11") (term "1"))
                                 (rule "assignmentAdditionInt" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaAddInt" (formula "11") (term "0,1,0"))
                                 (rule "add_literals" (formula "11") (term "0,1,0"))
                                 (rule "widening_identity_cast_5" (formula "11") (term "1"))
                                 (rule "assignment" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "blockEmpty" (formula "11") (term "1"))
                                 (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label45") (inst "#innerLabel=_label44"))
                                 (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x_68"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_95"))
                                 (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_97") (inst "#v0=x_96"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_96"))
                                 (rule "assignment" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "variableDeclarationAssign" (formula "11") (term "1"))
                                 (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_97"))
                                 (rule "assignmentSubtractionInt" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "translateJavaSubInt" (formula "11") (term "0,1,0"))
                                 (rule "sub_literals" (formula "11") (term "0,1,0"))
                                 (rule "less_than_comparison_simple" (formula "11") (term "1"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "less_literals" (formula "11") (term "0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "11"))
                                 (rule "ifSplit" (formula "11"))
                                 (branch "if x_95 true"
                                    (builtin "One Step Simplification" (formula "12"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if x_95 false"
                                    (builtin "One Step Simplification" (formula "12"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "blockEmpty" (formula "11") (term "1"))
                                    (rule "methodCallReturn" (formula "11") (term "1"))
                                    (rule "assignment" (formula "11") (term "1"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "methodCallEmpty" (formula "11") (term "1"))
                                    (rule "blockEmpty" (formula "11") (term "1"))
                                    (rule "assignment" (formula "11") (term "1"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "methodCallEmpty" (formula "11") (term "1"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "emptyModality" (formula "11") (term "1"))
                                    (builtin "One Step Simplification" (formula "11"))
                                    (rule "notRight" (formula "11"))
                                    (rule "eqSymm" (formula "1"))
                                    (rule "add_non_neg_square" (inst "squareFac=b"))
                                    (rule "methodCallWithAssignmentWithinClass" (formula "12") (term "1") (inst "#v0=x"))
                                    (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_98"))
                                    (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                    (rule "variableDeclaration" (formula "12") (term "1") (newnames "a_10"))
                                    (rule "assignment" (formula "12") (term "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                    (rule "variableDeclaration" (formula "12") (term "1") (newnames "b_10"))
                                    (rule "assignment" (formula "12") (term "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_pow_6,savedHeapBefore_pow_6"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_99"))
                                    (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_99"))
                                    (rule "equality_comparison_simple" (formula "12") (term "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "equal_literals" (formula "12") (term "0,0,1,0"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "ifSplit" (formula "12"))
                                    (branch "if x_99 true"
                                       (builtin "One Step Simplification" (formula "13"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_99 false"
                                       (builtin "One Step Simplification" (formula "13"))
                                       (builtin "One Step Simplification" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                       (rule "variableDeclaration" (formula "12") (term "1") (newnames "res_7"))
                                       (rule "assignment" (formula "12") (term "1"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "for_to_while" (formula "12") (term "1") (inst "#outerLabel=_label47") (inst "#innerLabel=_label46"))
                                       (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                       (rule "variableDeclaration" (formula "12") (term "1") (newnames "i_8"))
                                       (rule "assignment" (formula "12") (term "1"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "loopUnwind" (formula "12") (term "1") (inst "#outerLabel=_label49") (inst "#innerLabel=_label48"))
                                       (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_99"))
                                       (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_100"))
                                       (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_102") (inst "#v0=x_101"))
                                       (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                       (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_101"))
                                       (rule "assignment" (formula "12") (term "1"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                       (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_102"))
                                       (rule "assignmentSubtractionInt" (formula "12") (term "1"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "translateJavaSubInt" (formula "12") (term "0,1,0"))
                                       (rule "sub_literals" (formula "12") (term "0,1,0"))
                                       (rule "less_than_comparison_simple" (formula "12") (term "1"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "less_literals" (formula "12") (term "0,0,1,0"))
                                       (builtin "One Step Simplification" (formula "12"))
                                       (rule "ifSplit" (formula "12"))
                                       (branch "if x_100 true"
                                          (builtin "One Step Simplification" (formula "13"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "compound_assignment_op_mul" (formula "12") (term "1"))
                                          (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=x_99"))
                                          (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                          (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_103"))
                                          (rule "remove_parentheses_right" (formula "12") (term "1"))
                                          (rule "compound_multiplication_2" (formula "12") (term "1") (inst "#v1=x_105") (inst "#v0=x_104"))
                                          (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                          (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_104"))
                                          (rule "assignment" (formula "12") (term "1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                          (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_105"))
                                          (rule "remove_parentheses_right" (formula "12") (term "1"))
                                          (rule "assignment" (formula "12") (term "1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "assignmentMultiplicationInt" (formula "12") (term "1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "translateJavaMulInt" (formula "12") (term "0,1,0"))
                                          (rule "polySimp_mulAssoc" (formula "12") (term "0,1,0"))
                                          (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "2"))
                                          (rule "widening_identity_cast_5" (formula "12") (term "1"))
                                          (rule "assignment" (formula "12") (term "1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "blockEmpty" (formula "12") (term "1"))
                                          (rule "postincrement" (formula "12") (term "1"))
                                          (rule "compound_int_cast_expression" (formula "12") (term "1") (inst "#v=x_99"))
                                          (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                          (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_106"))
                                          (rule "remove_parentheses_right" (formula "12") (term "1"))
                                          (rule "assignmentAdditionInt" (formula "12") (term "1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "translateJavaAddInt" (formula "12") (term "0,1,0"))
                                          (rule "add_zero_left" (formula "12") (term "0,1,0"))
                                          (rule "widening_identity_cast_5" (formula "12") (term "1"))
                                          (rule "assignment" (formula "12") (term "1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "blockEmpty" (formula "12") (term "1"))
                                          (rule "loopUnwind" (formula "12") (term "1") (inst "#outerLabel=_label51") (inst "#innerLabel=_label50"))
                                          (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_99"))
                                          (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_107"))
                                          (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_109") (inst "#v0=x_108"))
                                          (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                          (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_108"))
                                          (rule "assignment" (formula "12") (term "1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                          (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_109"))
                                          (rule "assignmentSubtractionInt" (formula "12") (term "1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "translateJavaSubInt" (formula "12") (term "0,1,0"))
                                          (rule "sub_literals" (formula "12") (term "0,1,0"))
                                          (rule "less_than_comparison_simple" (formula "12") (term "1"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "less_literals" (formula "12") (term "0,0,1,0"))
                                          (builtin "One Step Simplification" (formula "12"))
                                          (rule "ifSplit" (formula "12"))
                                          (branch "if x_107 true"
                                             (builtin "One Step Simplification" (formula "13"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "closeFalse" (formula "1"))
                                          )
                                          (branch "if x_107 false"
                                             (builtin "One Step Simplification" (formula "13"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "true_left" (formula "1"))
                                             (rule "blockEmpty" (formula "12") (term "1"))
                                             (rule "methodCallReturn" (formula "12") (term "1"))
                                             (rule "assignment" (formula "12") (term "1"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "methodCallEmpty" (formula "12") (term "1"))
                                             (rule "blockEmpty" (formula "12") (term "1"))
                                             (rule "assignment" (formula "12") (term "1"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "methodCallEmpty" (formula "12") (term "1"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "emptyModality" (formula "12") (term "1"))
                                             (builtin "One Step Simplification" (formula "12"))
                                             (rule "notRight" (formula "12"))
                                             (rule "applyEqRigid" (formula "13") (term "1,0") (ifseqformula "1"))
                                             (rule "close" (formula "13") (ifseqformula "8"))
                                          )
                                       )
                                       (branch "if x_100 false"
                                          (builtin "One Step Simplification" (formula "13"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "closeFalse" (formula "1"))
                                       )
                                    )
                                 )
                              )
                              (branch "if x_88 false"
                                 (builtin "One Step Simplification" (formula "12"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "if x_76 false"
                              (builtin "One Step Simplification" (formula "14"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "inEqSimp_geqRight" (formula "12"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "blockEmpty" (formula "14") (term "1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption0" (formula "11") (ifseqformula "1"))
                              (rule "leq_literals" (formula "11") (term "0"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "true_left" (formula "11"))
                              (rule "inEqSimp_antiSymm" (formula "10") (ifseqformula "1"))
                              (rule "applyEqRigid" (formula "5") (term "0,0,0") (ifseqformula "10"))
                              (rule "mul_literals" (formula "5") (term "0,0"))
                              (rule "jdiv_axiom_inline" (formula "5") (term "0"))
                              (rule "div_literals" (formula "5") (term "1,0"))
                              (rule "qeq_literals" (formula "5") (term "0,0"))
                              (builtin "One Step Simplification" (formula "5"))
                              (rule "eqSymm" (formula "5"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "9"))
                              (rule "leq_literals" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "applyEqRigid" (formula "11") (term "0,1,1,0") (ifseqformula "8"))
                              (rule "applyEq" (formula "9") (term "0") (ifseqformula "8"))
                              (rule "qeq_literals" (formula "9"))
                              (rule "true_left" (formula "9"))
                              (rule "applyEqRigid" (formula "5") (term "0,1") (ifseqformula "8"))
                              (rule "mul_literals" (formula "5") (term "1"))
                              (rule "methodCallReturn" (formula "11") (term "1"))
                              (rule "assignment" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "methodCallEmpty" (formula "11") (term "1"))
                              (rule "blockEmpty" (formula "11") (term "1"))
                              (rule "assignment" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "methodCallEmpty" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "emptyModality" (formula "11") (term "1"))
                              (builtin "One Step Simplification" (formula "11"))
                              (rule "notRight" (formula "11"))
                              (rule "eqSymm" (formula "1"))
                              (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
                              (rule "add_non_neg_square" (inst "squareFac=b"))
                              (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                              (rule "methodCallWithAssignmentWithinClass" (formula "12") (term "1") (inst "#v0=x"))
                              (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_79"))
                              (rule "variableDeclarationAssign" (formula "12") (term "1"))
                              (rule "variableDeclaration" (formula "12") (term "1") (newnames "a_9"))
                              (rule "assignment" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "variableDeclarationAssign" (formula "12") (term "1"))
                              (rule "variableDeclaration" (formula "12") (term "1") (newnames "b_9"))
                              (rule "assignment" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_pow_5,savedHeapBefore_pow_5"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_80"))
                              (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_80"))
                              (rule "equality_comparison_simple" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "equal_literals" (formula "12") (term "0,0,1,0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "ifSplit" (formula "12"))
                              (branch "if x_80 true"
                                 (builtin "One Step Simplification" (formula "13"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_80 false"
                                 (builtin "One Step Simplification" (formula "13"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                 (rule "variableDeclaration" (formula "12") (term "1") (newnames "res_6"))
                                 (rule "assignment" (formula "12") (term "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "for_to_while" (formula "12") (term "1") (inst "#outerLabel=_label39") (inst "#innerLabel=_label38"))
                                 (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                 (rule "variableDeclaration" (formula "12") (term "1") (newnames "i_7"))
                                 (rule "assignment" (formula "12") (term "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "loopUnwind" (formula "12") (term "1") (inst "#outerLabel=_label41") (inst "#innerLabel=_label40"))
                                 (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_80"))
                                 (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_81"))
                                 (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_83") (inst "#v0=x_82"))
                                 (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                 (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_82"))
                                 (rule "assignment" (formula "12") (term "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "variableDeclarationAssign" (formula "12") (term "1"))
                                 (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_83"))
                                 (rule "assignmentSubtractionInt" (formula "12") (term "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "translateJavaSubInt" (formula "12") (term "0,1,0"))
                                 (rule "sub_literals" (formula "12") (term "0,1,0"))
                                 (rule "less_than_comparison_simple" (formula "12") (term "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "less_literals" (formula "12") (term "0,0,1,0"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "ifSplit" (formula "12"))
                                 (branch "if x_81 true"
                                    (builtin "One Step Simplification" (formula "13"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "closeFalse" (formula "1"))
                                 )
                                 (branch "if x_81 false"
                                    (builtin "One Step Simplification" (formula "13"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "blockEmpty" (formula "12") (term "1"))
                                    (rule "methodCallReturn" (formula "12") (term "1"))
                                    (rule "assignment" (formula "12") (term "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "methodCallEmpty" (formula "12") (term "1"))
                                    (rule "blockEmpty" (formula "12") (term "1"))
                                    (rule "assignment" (formula "12") (term "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "methodCallEmpty" (formula "12") (term "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "emptyModality" (formula "12") (term "1"))
                                    (builtin "One Step Simplification" (formula "12"))
                                    (rule "notRight" (formula "12"))
                                    (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "1"))
                                    (rule "close" (formula "13") (ifseqformula "7"))
                                 )
                              )
                           )
                        )
                        (branch "if x_69 false"
                           (builtin "One Step Simplification" (formula "14"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
               (branch "if x_40 false"
                  (builtin "One Step Simplification" (formula "15"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "inEqSimp_geqRight" (formula "12"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "blockEmpty" (formula "15") (term "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                  (rule "mul_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "1"))
                  (rule "leq_literals" (formula "7") (term "0"))
                  (builtin "One Step Simplification" (formula "7"))
                  (rule "true_left" (formula "7"))
                  (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
                  (rule "applyEq" (formula "11") (term "0") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "11"))
                  (rule "mul_literals" (formula "11") (term "1,0"))
                  (rule "polySimp_addComm1" (formula "11") (term "0"))
                  (rule "add_literals" (formula "11") (term "0,0"))
                  (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
                  (rule "qeq_literals" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                  (rule "leq_literals" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                  (rule "mul_literals" (formula "9") (term "1"))
                  (rule "elimGcdLeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,1,0"))
                  (rule "leq_literals" (formula "9") (term "0,0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0"))
                  (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
                  (rule "neg_literal" (formula "9") (term "0,0,0,0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0,0,0"))
                  (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
                  (rule "add_literals" (formula "9") (term "1,1,0,0"))
                  (rule "times_zero_1" (formula "9") (term "1,0,0"))
                  (rule "add_literals" (formula "9") (term "0,0"))
                  (rule "qeq_literals" (formula "9") (term "0"))
                  (builtin "One Step Simplification" (formula "9"))
                  (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "9"))
                  (rule "leq_literals" (formula "8") (term "0"))
                  (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "8"))
                  (rule "applyEq" (formula "12") (term "0,0,1,1,0") (ifseqformula "7"))
                  (rule "mul_literals" (formula "12") (term "0,1,1,0"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                  (rule "qeq_literals" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "applyEq" (formula "8") (term "0") (ifseqformula "7"))
                  (rule "leq_literals" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "applyEqRigid" (formula "9") (term "0,1,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "7"))
                  (rule "mul_literals" (formula "2") (term "0,0"))
                  (rule "jdiv_axiom_inline" (formula "2") (term "0"))
                  (rule "div_literals" (formula "2") (term "1,0"))
                  (rule "mul_literals" (formula "2") (term "0,0,2,0"))
                  (rule "qeq_literals" (formula "2") (term "0,0"))
                  (builtin "One Step Simplification" (formula "2"))
                  (rule "eqSymm" (formula "2"))
                  (rule "applyEq" (formula "3") (term "0,1") (ifseqformula "6"))
                  (rule "mul_literals" (formula "3") (term "1"))
                  (rule "methodCallReturn" (formula "10") (term "1"))
                  (rule "assignment" (formula "10") (term "1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "methodCallEmpty" (formula "10") (term "1"))
                  (rule "blockEmpty" (formula "10") (term "1"))
                  (rule "assignment" (formula "10") (term "1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "methodCallEmpty" (formula "10") (term "1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "emptyModality" (formula "10") (term "1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "notRight" (formula "10"))
                  (rule "eqSymm" (formula "1"))
                  (rule "add_non_neg_square" (inst "squareFac=a"))
                  (rule "divide_inEq2" (formula "1") (inst "divY=a") (ifseqformula "6"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "add_literals" (formula "1") (term "0,0,1,1,1"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "sub_literals" (formula "1") (term "0,1"))
                  (rule "div_literals" (formula "1") (term "1"))
                  (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "7"))
                  (rule "leq_literals" (formula "1") (term "0"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "methodCallWithAssignmentWithinClass" (formula "11") (term "1") (inst "#v0=x"))
                  (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_43"))
                  (rule "variableDeclarationAssign" (formula "11") (term "1"))
                  (rule "variableDeclaration" (formula "11") (term "1") (newnames "a_6"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "variableDeclarationAssign" (formula "11") (term "1"))
                  (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_6"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_pow_2,savedHeapBefore_pow_2"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x_44"))
                  (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_44"))
                  (rule "equality_comparison_simple" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "equal_literals" (formula "11") (term "0,0,1,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "ifSplit" (formula "11"))
                  (branch "if x_44 true"
                     (builtin "One Step Simplification" (formula "12"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
                  (branch "if x_44 false"
                     (builtin "One Step Simplification" (formula "12"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "res_3"))
                     (rule "assignment" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "for_to_while" (formula "11") (term "1") (inst "#outerLabel=_label21") (inst "#innerLabel=_label20"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_4"))
                     (rule "assignment" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label23") (inst "#innerLabel=_label22"))
                     (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x_44"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_45"))
                     (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_47") (inst "#v0=x_46"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_46"))
                     (rule "assignment" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_47"))
                     (rule "assignmentSubtractionInt" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "translateJavaSubInt" (formula "11") (term "0,1,0"))
                     (rule "sub_literals" (formula "11") (term "0,1,0"))
                     (rule "less_than_comparison_simple" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "less_literals" (formula "11") (term "0,0,1,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "ifSplit" (formula "11"))
                     (branch "if x_45 true"
                        (builtin "One Step Simplification" (formula "12"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "compound_assignment_op_mul" (formula "11") (term "1"))
                        (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x_44"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_48"))
                        (rule "remove_parentheses_right" (formula "11") (term "1"))
                        (rule "compound_multiplication_2" (formula "11") (term "1") (inst "#v1=x_50") (inst "#v0=x_49"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_49"))
                        (rule "assignment" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_50"))
                        (rule "remove_parentheses_right" (formula "11") (term "1"))
                        (rule "assignment" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "assignmentMultiplicationInt" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "translateJavaMulInt" (formula "11") (term "0,1,0"))
                        (rule "widening_identity_cast_5" (formula "11") (term "1"))
                        (rule "assignment" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "blockEmpty" (formula "11") (term "1"))
                        (rule "postincrement" (formula "11") (term "1"))
                        (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x_44"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_51"))
                        (rule "remove_parentheses_right" (formula "11") (term "1"))
                        (rule "assignmentAdditionInt" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "translateJavaAddInt" (formula "11") (term "0,1,0"))
                        (rule "add_zero_left" (formula "11") (term "0,1,0"))
                        (rule "widening_identity_cast_5" (formula "11") (term "1"))
                        (rule "assignment" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "blockEmpty" (formula "11") (term "1"))
                        (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label25") (inst "#innerLabel=_label24"))
                        (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x_44"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_52"))
                        (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_54") (inst "#v0=x_53"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_53"))
                        (rule "assignment" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "variableDeclarationAssign" (formula "11") (term "1"))
                        (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_54"))
                        (rule "assignmentSubtractionInt" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "translateJavaSubInt" (formula "11") (term "0,1,0"))
                        (rule "sub_literals" (formula "11") (term "0,1,0"))
                        (rule "less_than_comparison_simple" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "less_literals" (formula "11") (term "0,0,1,0"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "ifSplit" (formula "11"))
                        (branch "if x_52 true"
                           (builtin "One Step Simplification" (formula "12"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_52 false"
                           (builtin "One Step Simplification" (formula "12"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "blockEmpty" (formula "11") (term "1"))
                           (rule "methodCallReturn" (formula "11") (term "1"))
                           (rule "assignment" (formula "11") (term "1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "methodCallEmpty" (formula "11") (term "1"))
                           (rule "blockEmpty" (formula "11") (term "1"))
                           (rule "assignment" (formula "11") (term "1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "methodCallEmpty" (formula "11") (term "1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "emptyModality" (formula "11") (term "1"))
                           (builtin "One Step Simplification" (formula "11"))
                           (rule "notRight" (formula "11"))
                           (rule "eqSymm" (formula "1"))
                           (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
                           (rule "add_non_neg_square" (inst "squareFac=b"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                           (rule "methodCallWithAssignmentWithinClass" (formula "12") (term "1") (inst "#v0=x"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_55"))
                           (rule "variableDeclarationAssign" (formula "12") (term "1"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "a_7"))
                           (rule "assignment" (formula "12") (term "1"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "variableDeclarationAssign" (formula "12") (term "1"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "b_7"))
                           (rule "assignment" (formula "12") (term "1"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_pow_3,savedHeapBefore_pow_3"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_56"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_56"))
                           (rule "equality_comparison_simple" (formula "12") (term "1"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "equal_literals" (formula "12") (term "0,0,1,0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "ifSplit" (formula "12"))
                           (branch "if x_56 true"
                              (builtin "One Step Simplification" (formula "13"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if x_56 false"
                              (builtin "One Step Simplification" (formula "13"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "variableDeclarationAssign" (formula "12") (term "1"))
                              (rule "variableDeclaration" (formula "12") (term "1") (newnames "res_4"))
                              (rule "assignment" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "for_to_while" (formula "12") (term "1") (inst "#outerLabel=_label27") (inst "#innerLabel=_label26"))
                              (rule "variableDeclarationAssign" (formula "12") (term "1"))
                              (rule "variableDeclaration" (formula "12") (term "1") (newnames "i_5"))
                              (rule "assignment" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "loopUnwind" (formula "12") (term "1") (inst "#outerLabel=_label29") (inst "#innerLabel=_label28"))
                              (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_56"))
                              (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_57"))
                              (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_59") (inst "#v0=x_58"))
                              (rule "variableDeclarationAssign" (formula "12") (term "1"))
                              (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_58"))
                              (rule "assignment" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "variableDeclarationAssign" (formula "12") (term "1"))
                              (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_59"))
                              (rule "assignmentSubtractionInt" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "translateJavaSubInt" (formula "12") (term "0,1,0"))
                              (rule "sub_literals" (formula "12") (term "0,1,0"))
                              (rule "less_than_comparison_simple" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "less_literals" (formula "12") (term "0,0,1,0"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "ifSplit" (formula "12"))
                              (branch "if x_57 true"
                                 (builtin "One Step Simplification" (formula "13"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_57 false"
                                 (builtin "One Step Simplification" (formula "13"))
                                 (builtin "One Step Simplification" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "blockEmpty" (formula "12") (term "1"))
                                 (rule "methodCallReturn" (formula "12") (term "1"))
                                 (rule "assignment" (formula "12") (term "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "methodCallEmpty" (formula "12") (term "1"))
                                 (rule "blockEmpty" (formula "12") (term "1"))
                                 (rule "assignment" (formula "12") (term "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "methodCallEmpty" (formula "12") (term "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "emptyModality" (formula "12") (term "1"))
                                 (builtin "One Step Simplification" (formula "12"))
                                 (rule "notRight" (formula "12"))
                                 (rule "applyEqRigid" (formula "13") (term "1,0") (ifseqformula "1"))
                                 (rule "close" (formula "13") (ifseqformula "7"))
                              )
                           )
                        )
                     )
                     (branch "if x_45 false"
                        (builtin "One Step Simplification" (formula "12"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
               )
            )
            (branch "if x_16 false"
               (builtin "One Step Simplification" (formula "15"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "inEqSimp_geqRight" (formula "12"))
               (rule "mul_literals" (formula "1") (term "1,0,0"))
               (rule "add_literals" (formula "1") (term "0,0"))
               (rule "blockEmpty" (formula "15") (term "1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "1"))
               (rule "mul_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "1"))
               (rule "leq_literals" (formula "7") (term "0"))
               (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
               (rule "applyEq" (formula "3") (term "0") (ifseqformula "2"))
               (rule "qeq_literals" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
               (rule "leq_literals" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
               (rule "inEqSimp_homoInEq1" (formula "9"))
               (rule "mul_literals" (formula "9") (term "1,0"))
               (rule "polySimp_addComm1" (formula "9") (term "0"))
               (rule "add_literals" (formula "9") (term "0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "9"))
               (rule "mul_literals" (formula "9") (term "1"))
               (rule "elimGcdLeq_antec" (formula "9") (inst "elimGcdRightDiv=Z(1(#))") (inst "elimGcdLeftDiv=l_0") (inst "elimGcd=Z(2(#))"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "9") (term "1,0,1,0"))
               (rule "leq_literals" (formula "9") (term "0,0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "mul_literals" (formula "9") (term "1,0,0,0,0,0"))
               (rule "neg_literal" (formula "9") (term "0,0,0,0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,0,0"))
               (rule "add_literals" (formula "9") (term "0,0,0,0"))
               (rule "polySimp_pullOutFactor0b" (formula "9") (term "0,0"))
               (rule "add_literals" (formula "9") (term "1,1,0,0"))
               (rule "times_zero_1" (formula "9") (term "1,0,0"))
               (rule "add_literals" (formula "9") (term "0,0"))
               (rule "qeq_literals" (formula "9") (term "0"))
               (builtin "One Step Simplification" (formula "9"))
               (rule "inEqSimp_subsumption0" (formula "8") (ifseqformula "9"))
               (rule "leq_literals" (formula "8") (term "0"))
               (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "inEqSimp_antiSymm" (formula "7") (ifseqformula "8"))
               (rule "applyEqRigid" (formula "12") (term "0,0,1,1,0") (ifseqformula "7"))
               (rule "mul_literals" (formula "12") (term "0,1,1,0"))
               (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "7"))
               (rule "mul_literals" (formula "2") (term "0,0"))
               (rule "jdiv_axiom_inline" (formula "2") (term "0"))
               (rule "div_literals" (formula "2") (term "1,0"))
               (rule "mul_literals" (formula "2") (term "0,0,2,0"))
               (rule "qeq_literals" (formula "2") (term "0,0"))
               (builtin "One Step Simplification" (formula "2"))
               (rule "eqSymm" (formula "2"))
               (rule "applyEqRigid" (formula "8") (term "0") (ifseqformula "6"))
               (rule "leq_literals" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
               (rule "qeq_literals" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "applyEq" (formula "8") (term "0,1,1,0") (ifseqformula "6"))
               (rule "applyEq" (formula "3") (term "0,1") (ifseqformula "6"))
               (rule "mul_literals" (formula "3") (term "1"))
               (rule "methodCallReturn" (formula "10") (term "1"))
               (rule "assignment" (formula "10") (term "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "methodCallEmpty" (formula "10") (term "1"))
               (rule "blockEmpty" (formula "10") (term "1"))
               (rule "assignment" (formula "10") (term "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "methodCallEmpty" (formula "10") (term "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "emptyModality" (formula "10") (term "1"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "notRight" (formula "10"))
               (rule "eqSymm" (formula "1"))
               (rule "add_non_neg_square" (inst "squareFac=a"))
               (rule "divide_inEq2" (formula "1") (inst "divY=a") (ifseqformula "6"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "qeq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "add_zero_left" (formula "1") (term "0,0,1,1"))
               (rule "leq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "sub_literals" (formula "1") (term "0,1"))
               (rule "div_literals" (formula "1") (term "1"))
               (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "7"))
               (rule "leq_literals" (formula "1") (term "0"))
               (builtin "One Step Simplification" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "methodCallWithAssignmentWithinClass" (formula "11") (term "1") (inst "#v0=x"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_19"))
               (rule "variableDeclarationAssign" (formula "11") (term "1"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "a_4"))
               (rule "assignment" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "variableDeclarationAssign" (formula "11") (term "1"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "b_4"))
               (rule "assignment" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_pow_0,savedHeapBefore_pow_0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x_20"))
               (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_20"))
               (rule "equality_comparison_simple" (formula "11") (term "1"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "equal_literals" (formula "11") (term "0,0,1,0"))
               (builtin "One Step Simplification" (formula "11"))
               (rule "ifSplit" (formula "11"))
               (branch "if x_20 true"
                  (builtin "One Step Simplification" (formula "12"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_20 false"
                  (builtin "One Step Simplification" (formula "12"))
                  (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "variableDeclarationAssign" (formula "11") (term "1"))
                  (rule "variableDeclaration" (formula "11") (term "1") (newnames "res_1"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "for_to_while" (formula "11") (term "1") (inst "#outerLabel=_label9") (inst "#innerLabel=_label8"))
                  (rule "variableDeclarationAssign" (formula "11") (term "1"))
                  (rule "variableDeclaration" (formula "11") (term "1") (newnames "i_2"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label11") (inst "#innerLabel=_label10"))
                  (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x_20"))
                  (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_21"))
                  (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_23") (inst "#v0=x_22"))
                  (rule "variableDeclarationAssign" (formula "11") (term "1"))
                  (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_22"))
                  (rule "assignment" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "variableDeclarationAssign" (formula "11") (term "1"))
                  (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_23"))
                  (rule "assignmentSubtractionInt" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "translateJavaSubInt" (formula "11") (term "0,1,0"))
                  (rule "sub_literals" (formula "11") (term "0,1,0"))
                  (rule "less_than_comparison_simple" (formula "11") (term "1"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "less_literals" (formula "11") (term "0,0,1,0"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "ifSplit" (formula "11"))
                  (branch "if x_21 true"
                     (builtin "One Step Simplification" (formula "12"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "compound_assignment_op_mul" (formula "11") (term "1"))
                     (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x_20"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_24"))
                     (rule "remove_parentheses_right" (formula "11") (term "1"))
                     (rule "compound_multiplication_2" (formula "11") (term "1") (inst "#v1=x_26") (inst "#v0=x_25"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_25"))
                     (rule "assignment" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_26"))
                     (rule "remove_parentheses_right" (formula "11") (term "1"))
                     (rule "assignment" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "assignmentMultiplicationInt" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "translateJavaMulInt" (formula "11") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "11") (term "1"))
                     (rule "assignment" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "blockEmpty" (formula "11") (term "1"))
                     (rule "postincrement" (formula "11") (term "1"))
                     (rule "compound_int_cast_expression" (formula "11") (term "1") (inst "#v=x_20"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_27"))
                     (rule "remove_parentheses_right" (formula "11") (term "1"))
                     (rule "assignmentAdditionInt" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "translateJavaAddInt" (formula "11") (term "0,1,0"))
                     (rule "add_zero_left" (formula "11") (term "0,1,0"))
                     (rule "widening_identity_cast_5" (formula "11") (term "1"))
                     (rule "assignment" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "blockEmpty" (formula "11") (term "1"))
                     (rule "loopUnwind" (formula "11") (term "1") (inst "#outerLabel=_label13") (inst "#innerLabel=_label12"))
                     (rule "ifUnfold" (formula "11") (term "1") (inst "#boolv=x_20"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_28"))
                     (rule "compound_less_than_comparison_2" (formula "11") (term "1") (inst "#v1=x_30") (inst "#v0=x_29"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_29"))
                     (rule "assignment" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "variableDeclarationAssign" (formula "11") (term "1"))
                     (rule "variableDeclaration" (formula "11") (term "1") (newnames "x_30"))
                     (rule "assignmentSubtractionInt" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "translateJavaSubInt" (formula "11") (term "0,1,0"))
                     (rule "sub_literals" (formula "11") (term "0,1,0"))
                     (rule "less_than_comparison_simple" (formula "11") (term "1"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "less_literals" (formula "11") (term "0,0,1,0"))
                     (builtin "One Step Simplification" (formula "11"))
                     (rule "ifSplit" (formula "11"))
                     (branch "if x_28 true"
                        (builtin "One Step Simplification" (formula "12"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_28 false"
                        (builtin "One Step Simplification" (formula "12"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "blockEmpty" (formula "11") (term "1"))
                        (rule "methodCallReturn" (formula "11") (term "1"))
                        (rule "assignment" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "methodCallEmpty" (formula "11") (term "1"))
                        (rule "blockEmpty" (formula "11") (term "1"))
                        (rule "assignment" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "methodCallEmpty" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "emptyModality" (formula "11") (term "1"))
                        (builtin "One Step Simplification" (formula "11"))
                        (rule "notRight" (formula "11"))
                        (rule "eqSymm" (formula "1"))
                        (rule "applyEq" (formula "11") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "add_non_neg_square" (inst "squareFac=b"))
                        (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                        (rule "methodCallWithAssignmentWithinClass" (formula "12") (term "1") (inst "#v0=x"))
                        (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_31"))
                        (rule "variableDeclarationAssign" (formula "12") (term "1"))
                        (rule "variableDeclaration" (formula "12") (term "1") (newnames "a_5"))
                        (rule "assignment" (formula "12") (term "1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "variableDeclarationAssign" (formula "12") (term "1"))
                        (rule "variableDeclaration" (formula "12") (term "1") (newnames "b_5"))
                        (rule "assignment" (formula "12") (term "1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_pow_1,savedHeapBefore_pow_1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_32"))
                        (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_32"))
                        (rule "equality_comparison_simple" (formula "12") (term "1"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "equal_literals" (formula "12") (term "0,0,1,0"))
                        (builtin "One Step Simplification" (formula "12"))
                        (rule "ifSplit" (formula "12"))
                        (branch "if x_32 true"
                           (builtin "One Step Simplification" (formula "13"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_32 false"
                           (builtin "One Step Simplification" (formula "13"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "variableDeclarationAssign" (formula "12") (term "1"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "res_2"))
                           (rule "assignment" (formula "12") (term "1"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "for_to_while" (formula "12") (term "1") (inst "#outerLabel=_label15") (inst "#innerLabel=_label14"))
                           (rule "variableDeclarationAssign" (formula "12") (term "1"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "i_3"))
                           (rule "assignment" (formula "12") (term "1"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "loopUnwind" (formula "12") (term "1") (inst "#outerLabel=_label17") (inst "#innerLabel=_label16"))
                           (rule "ifUnfold" (formula "12") (term "1") (inst "#boolv=x_32"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_33"))
                           (rule "compound_less_than_comparison_2" (formula "12") (term "1") (inst "#v1=x_35") (inst "#v0=x_34"))
                           (rule "variableDeclarationAssign" (formula "12") (term "1"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_34"))
                           (rule "assignment" (formula "12") (term "1"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "variableDeclarationAssign" (formula "12") (term "1"))
                           (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_35"))
                           (rule "assignmentSubtractionInt" (formula "12") (term "1"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "translateJavaSubInt" (formula "12") (term "0,1,0"))
                           (rule "sub_literals" (formula "12") (term "0,1,0"))
                           (rule "less_than_comparison_simple" (formula "12") (term "1"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "less_literals" (formula "12") (term "0,0,1,0"))
                           (builtin "One Step Simplification" (formula "12"))
                           (rule "ifSplit" (formula "12"))
                           (branch "if x_33 true"
                              (builtin "One Step Simplification" (formula "13"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if x_33 false"
                              (builtin "One Step Simplification" (formula "13"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "blockEmpty" (formula "12") (term "1"))
                              (rule "methodCallReturn" (formula "12") (term "1"))
                              (rule "assignment" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "methodCallEmpty" (formula "12") (term "1"))
                              (rule "blockEmpty" (formula "12") (term "1"))
                              (rule "assignment" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "methodCallEmpty" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "emptyModality" (formula "12") (term "1"))
                              (builtin "One Step Simplification" (formula "12"))
                              (rule "notRight" (formula "12"))
                              (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "1"))
                              (rule "close" (formula "13") (ifseqformula "7"))
                           )
                        )
                     )
                  )
                  (branch "if x_21 false"
                     (builtin "One Step Simplification" (formula "12"))
                     (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
            )
         )
         (branch "if x_9 false"
            (builtin "One Step Simplification" (formula "15"))
            (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_geqRight" (formula "12"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "blockEmpty" (formula "15") (term "1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "1"))
            (rule "leq_literals" (formula "7") (term "0"))
            (builtin "One Step Simplification" (formula "7"))
            (rule "true_left" (formula "7"))
            (rule "inEqSimp_antiSymm" (formula "2") (ifseqformula "1"))
            (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
            (rule "leq_literals" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
            (rule "inEqSimp_homoInEq1" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1,0"))
            (rule "polySimp_addComm1" (formula "9") (term "0"))
            (rule "add_literals" (formula "9") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1"))
            (rule "inEqSimp_contradInEq5" (formula "9") (ifseqformula "7"))
            (rule "greater_literals" (formula "9") (term "0,0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "mul_literals" (formula "9") (term "1,0"))
            (rule "qeq_literals" (formula "9") (term "0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "closeFalse" (formula "9"))
         )
      )
      (branch "if x_2 false"
         (builtin "One Step Simplification" (formula "15"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_geqRight" (formula "12"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "blockEmpty" (formula "15") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption0" (formula "7") (ifseqformula "1"))
         (rule "leq_literals" (formula "7") (term "0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "inEqSimp_antiSymm" (formula "5") (ifseqformula "1"))
         (rule "applyEq" (formula "11") (term "0") (ifseqformula "5"))
         (rule "inEqSimp_homoInEq1" (formula "11"))
         (rule "mul_literals" (formula "11") (term "1,0"))
         (rule "polySimp_addComm1" (formula "11") (term "0"))
         (rule "add_literals" (formula "11") (term "0,0"))
         (rule "add_zero_left" (formula "11") (term "0"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "5"))
         (rule "leq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
         (rule "qeq_literals" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "inEqSimp_contradInEq5" (formula "9") (ifseqformula "7"))
         (rule "mul_literals" (formula "9") (term "1,1,0"))
         (rule "greater_literals" (formula "9") (term "0,0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "qeq_literals" (formula "9") (term "0"))
         (builtin "One Step Simplification" (formula "9"))
         (rule "closeFalse" (formula "9"))
      )
   )
)
(branch
   (builtin "One Step Simplification" (formula "11"))
   (rule "equal_literals" (formula "11") (term "0"))
   (builtin "One Step Simplification" (formula "11"))
   (rule "closeTrue" (formula "11"))
)
)

}
//statementid:{eb50eeaa-84d9-49d8-bed2-26681b75d315}