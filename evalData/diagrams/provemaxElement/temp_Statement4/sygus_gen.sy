(set-logic ALL)
(declare-datatype Tuple ((empty) (mkTuple )))

(declare-var j_preCon Int)
(declare-var j_postCon Int)
(declare-var i_preCon Int)
(declare-var i_postCon Int)
(declare-var A_preCon (Seq Int))
(declare-var A_postCon (Seq Int))

(define-fun preCondition ((j_preCon Int) (i_preCon Int) (A_preCon (Seq Int))) Bool (and (and (forall ( (var_q Int)) (or (not (and (>= var_q 0) (< var_q j_preCon))) (>= (seq.nth A_preCon i_preCon) (seq.nth A_preCon var_q)))) (not (= j_preCon (seq.len A_preCon))) (<= (seq.nth A_preCon j_preCon) (seq.nth A_preCon i_preCon)) (not false) (> (seq.len A_preCon) 0) (< (seq.len A_preCon) 10) (>= i_preCon 0) (< i_preCon (seq.len A_preCon)) (>= j_preCon 0) (<= j_preCon (seq.len A_preCon)) (= true true) (= true true) true)))

(define-fun postCondition ((j_postCon Int) (i_postCon Int) (A_postCon (Seq Int))) Bool (and (forall ( (var_q Int)) (or (not (and (>= var_q 0) (< var_q (+ j_postCon 1)))) (>= (seq.nth A_postCon i_postCon) (seq.nth A_postCon var_q))))))

(synth-fun targetFunction ((j Int) (i Int) (A (Seq Int))) Tuple)

(declare-var j_in Int)
(declare-var i_in Int)
(declare-var A_in (Seq Int))

(constraint (forall ((j_in Int) (i_in Int) (A_in (Seq Int))) (=>
	(and
		(preCondition j_in i_in A_in)
	)
	(and
		(postCondition j_in i_in A_in)
	)
)))
(check-synth)