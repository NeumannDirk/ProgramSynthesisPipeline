\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Mar 14 12:09:26 CET 2024
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "D:/evalData_noPredicates";
\include "helper.key";
\programVariables {
int j;
int i;
int[] A;
int[] A_old;
Heap heapAtPre;
}\problem {
     \forall int q;
       (  !(geq(q, Z(0(#))) & lt(q, j))
        | geq(int::select(heap, A, arr(i)),
              int::select(heap, A, arr(q))))
   & !j = length(A)
   & gt(int::select(heap, A, arr(j)),
        int::select(heap, A, arr(i)))
   & !A = null
   & gt(length(A), Z(0(#)))
   & lt(length(A), Z(0(1(#))))
   & geq(i, Z(0(#)))
   & lt(i, length(A))
   & geq(j, Z(0(#)))
   & leq(j, length(A))
   &   boolean::select(heap,
                       A,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       A,
                       java.lang.Object::<created>)
     = TRUE
   &   boolean::select(heap,
                       A_old,
                       java.lang.Object::<created>)
     = TRUE
   & wellFormed(heap)
-> {heapAtPre:=heap || A_old:=A}
     \<{
         i=j;
       }\> (  \forall int q;
                (  !(  geq(q, Z(0(#)))
                     & lt(q, add(j, Z(1(#)))))
                 | geq(int::select(heap, A, arr(i)),
                       int::select(heap, A, arr(q))))
            & A = A_old)

}

\proof {
(keyLog "0" (keyUser "DirkNeumann" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "355")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "14") (term "1,0,1"))
(rule "eqSymm" (formula "12"))
(rule "polySimp_addComm0" (formula "14") (term "1,1,0,0,0,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "6") (term "0"))
(rule "inEqSimp_ltToLeq" (formula "4"))
(rule "mul_literals" (formula "4") (term "1,0,0"))
(rule "add_literals" (formula "4") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "3"))
(rule "times_zero_1" (formula "3") (term "1,0,0"))
(rule "add_zero_right" (formula "3") (term "0,0"))
(rule "inEqSimp_gtToGeq" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "1") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,1,0,0,0"))
(rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,0,0,1"))
(rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,0,0,1"))
(rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,0,0,1"))
(rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,0,0,1"))
(rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,0,0,1"))
(rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,0,1"))
(rule "inEqSimp_commuteLeq" (formula "8"))
(rule "inEqSimp_commuteGeq" (formula "1") (term "1,0"))
(rule "assignment" (formula "14") (term "1"))
(builtin "One Step Simplification" (formula "14"))
(rule "inEqSimp_sepNegMonomial0" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "0"))
(rule "polySimp_elimOne" (formula "6") (term "0"))
(rule "inEqSimp_sepPosMonomial0" (formula "4"))
(rule "mul_literals" (formula "4") (term "1"))
(rule "inEqSimp_sepPosMonomial1" (formula "3"))
(rule "mul_literals" (formula "3") (term "1"))
(rule "inEqSimp_sepPosMonomial1" (formula "2"))
(rule "polySimp_mulComm0" (formula "2") (term "1"))
(rule "polySimp_rightDist" (formula "2") (term "1"))
(rule "mul_literals" (formula "2") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
(rule "polySimp_elimOne" (formula "2") (term "1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "1,0,0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,1,0,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,1,0,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,1,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,0,0,1"))
(rule "inEqSimp_strengthen1" (formula "8") (ifseqformula "12"))
(rule "inEqSimp_contradEq7" (formula "12") (ifseqformula "8"))
(rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
(rule "polySimp_pullOutFactor1b" (formula "12") (term "0,0"))
(rule "add_literals" (formula "12") (term "1,1,0,0"))
(rule "times_zero_1" (formula "12") (term "1,0,0"))
(rule "add_zero_right" (formula "12") (term "0,0"))
(rule "leq_literals" (formula "12") (term "0"))
(builtin "One Step Simplification" (formula "12"))
(rule "false_right" (formula "12"))
(rule "inEqSimp_exactShadow3" (formula "8") (ifseqformula "4"))
(rule "polySimp_rightDist" (formula "8") (term "0,0"))
(rule "mul_literals" (formula "8") (term "0,0,0"))
(rule "polySimp_addComm1" (formula "8") (term "0"))
(rule "add_literals" (formula "8") (term "0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "8"))
(rule "polySimp_mulLiterals" (formula "8") (term "0"))
(rule "polySimp_elimOne" (formula "8") (term "0"))
(rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "4"))
(rule "polySimp_rightDist" (formula "6") (term "0,0"))
(rule "mul_literals" (formula "6") (term "0,0,0"))
(rule "polySimp_addComm1" (formula "6") (term "0"))
(rule "add_literals" (formula "6") (term "0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "6"))
(rule "polySimp_mulLiterals" (formula "6") (term "0"))
(rule "polySimp_elimOne" (formula "6") (term "0"))
(rule "nnf_notAnd" (formula "1") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "1") (term "0,0,0"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "1") (term "0,0,0"))
(rule "mul_literals" (formula "1") (term "1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "1") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,1,0,0"))
(rule "add_literals" (formula "1") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "1") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "1") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "15") (term "0,0,0,0,1"))
(rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,0,1"))
(rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,0,1"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,0,1"))
(rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,0,1"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,0,1"))
(rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,0,1"))
(rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,0,1"))
(rule "add_literals" (formula "15") (term "0,0,0,0,0,0,0,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,0,1"))
(rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,1"))
(rule "emptyModality" (formula "15") (term "1"))
(builtin "One Step Simplification" (formula "15"))
(rule "allRight" (formula "15") (inst "sk=q_0"))
(rule "orRight" (formula "15"))
(rule "orRight" (formula "15"))
(rule "inEqSimp_leqRight" (formula "17"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
(rule "inEqSimp_geqRight" (formula "17"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0"))
(rule "add_literals" (formula "1") (term "0,0,0"))
(rule "add_zero_left" (formula "1") (term "0,0"))
(rule "inEqSimp_leqRight" (formula "17"))
(rule "mul_literals" (formula "1") (term "1,0,0"))
(rule "add_literals" (formula "1") (term "0,0"))
(rule "add_zero_left" (formula "1") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "3"))
(rule "polySimp_mulComm0" (formula "3") (term "1"))
(rule "polySimp_rightDist" (formula "3") (term "1"))
(rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
(rule "mul_literals" (formula "3") (term "0,1"))
(rule "polySimp_elimOne" (formula "3") (term "1,1"))
(rule "inEqSimp_sepPosMonomial0" (formula "2"))
(rule "polySimp_mulLiterals" (formula "2") (term "1"))
(rule "polySimp_elimOne" (formula "2") (term "1"))
(rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "2"))
(rule "times_zero_1" (formula "1") (term "0,0"))
(rule "add_zero_left" (formula "1") (term "0"))
(rule "arrayLengthIsAnInt" (formula "10") (term "0"))
(builtin "One Step Simplification" (formula "10"))
(rule "true_left" (formula "10"))
(rule "arrayLengthNotNegative" (formula "10") (term "0"))
(rule "inEqSimp_subsumption1" (formula "10") (ifseqformula "6"))
(rule "leq_literals" (formula "10") (term "0"))
(builtin "One Step Simplification" (formula "10"))
(rule "true_left" (formula "10"))
(rule "allLeft" (formula "4") (inst "t=q_0"))
(rule "inEqSimp_contradInEq1" (formula "4") (term "0,0") (ifseqformula "1"))
(rule "qeq_literals" (formula "4") (term "0,0,0"))
(builtin "One Step Simplification" (formula "4"))
(rule "cut_direct" (formula "4") (term "0"))
(branch "CUT: q_0 >= j TRUE"
   (builtin "One Step Simplification" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "inEqSimp_antiSymm" (formula "4") (ifseqformula "2"))
   (rule "applyEq" (formula "5") (term "0") (ifseqformula "4"))
   (rule "inEqSimp_homoInEq1" (formula "5"))
   (rule "polySimp_pullOutFactor1" (formula "5") (term "0"))
   (rule "add_literals" (formula "5") (term "1,0"))
   (rule "times_zero_1" (formula "5") (term "0"))
   (rule "leq_literals" (formula "5"))
   (rule "true_left" (formula "5"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "4"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "3"))
   (rule "inEqSimp_homoInEq0" (formula "1"))
   (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,0"))
   (rule "times_zero_1" (formula "1") (term "0"))
   (rule "qeq_literals" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "applyEq" (formula "1") (term "0,2,0") (ifseqformula "2"))
   (rule "inEqSimp_homoInEq1" (formula "1"))
   (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
   (rule "add_literals" (formula "1") (term "1,1,0"))
   (rule "times_zero_1" (formula "1") (term "1,0"))
   (rule "add_zero_right" (formula "1") (term "0"))
   (rule "leq_literals" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "CUT: q_0 >= j FALSE"
   (builtin "One Step Simplification" (formula "4"))
   (rule "inEqSimp_geqRight" (formula "18"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (rule "inEqSimp_subsumption0" (formula "3") (ifseqformula "1"))
   (rule "inEqSimp_homoInEq0" (formula "3") (term "0"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0,0"))
   (rule "polySimp_addComm0" (formula "3") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0,0"))
   (rule "add_literals" (formula "3") (term "1,1,0,0"))
   (rule "times_zero_1" (formula "3") (term "1,0,0"))
   (rule "add_zero_right" (formula "3") (term "0,0"))
   (rule "qeq_literals" (formula "3") (term "0"))
   (builtin "One Step Simplification" (formula "3"))
   (rule "true_left" (formula "3"))
   (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "4"))
   (rule "polySimp_rightDist" (formula "3") (term "0,0"))
   (rule "mul_literals" (formula "3") (term "0,0,0"))
   (rule "polySimp_addComm1" (formula "3") (term "0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "3"))
   (rule "polySimp_mulLiterals" (formula "3") (term "0"))
   (rule "polySimp_elimOne" (formula "3") (term "0"))
   (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "7"))
   (rule "andLeft" (formula "3"))
   (rule "inEqSimp_homoInEq1" (formula "3"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0"))
   (rule "mul_literals" (formula "3") (term "0,1,0"))
   (rule "polySimp_addAssoc" (formula "3") (term "0"))
   (rule "polySimp_addComm1" (formula "3") (term "0,0"))
   (rule "add_literals" (formula "3") (term "0,0,0"))
   (rule "polySimp_pullOutFactor1b" (formula "3") (term "0"))
   (rule "add_literals" (formula "3") (term "1,1,0"))
   (rule "times_zero_1" (formula "3") (term "1,0"))
   (rule "add_zero_right" (formula "3") (term "0"))
   (rule "leq_literals" (formula "3"))
   (rule "closeFalse" (formula "3"))
)
)

}
//statementid:{ddda60dd-57fd-4da0-aa9e-08b4cb7bb75a}
//modifiable:{i}