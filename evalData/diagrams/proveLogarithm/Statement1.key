\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Mar 14 12:10:35 CET 2024
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , optimisedSelectRules-optimisedSelectRules\\:on , reach-reach\\:on , moreSeqRules-moreSeqRules\\:off , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:off , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:showSatisfiability , assertions-assertions\\:on , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_EXPAND
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=2147483647
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_RESTRICTED
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "D:/evalData_noPredicates";
\include "helper.key";
\programVariables {
int n;
int l;
int N;
int N_old;
Heap heapAtPre;
}\problem {
     gt(N, Z(0(#)))
   & gt(N, Z(0(#)))
   & leq(n, N)
   & geq(n, Z(1(#)))
   & geq(l, Z(0(#)))
   & lt(l, N)
   & lt(N, Z(0(2(#))))
   & wellFormed(heap)
-> {heapAtPre:=heap || N_old:=N}
     \<{
         n=N;
         l=0;
       }\> (  geq(N,
                  mul(n, Helper::pow2(heap, Z(2(#)), l)))
            & lt(N,
                 mul(add(n, Z(1(#))),
                     Helper::pow2(heap, Z(2(#)), l)))
            & N = N_old)

}

\proof {
(keyLog "0" (keyUser "DirkNeumann" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "391")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "8") (term "1,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0,1"))
(rule "polySimp_addComm0" (formula "8") (term "1,1,1,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "0,1,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,1,0,0,1"))
(rule "inEqSimp_ltToLeq" (formula "6"))
(rule "mul_literals" (formula "6") (term "1,0,0"))
(rule "add_literals" (formula "6") (term "0,0"))
(rule "inEqSimp_ltToLeq" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
(rule "inEqSimp_gtToGeq" (formula "1"))
(rule "times_zero_1" (formula "1") (term "1,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0,1"))
(rule "polySimp_rightDist" (formula "8") (term "1,0,0,1,0,0,1"))
(rule "polySimp_mulComm0" (formula "8") (term "0,1,0,0,1,0,0,1"))
(rule "polySimp_addAssoc" (formula "8") (term "0,0,1,0,0,1"))
(rule "polySimp_addComm1" (formula "8") (term "0,1,0,0,1"))
(rule "polySimp_addComm1" (formula "8") (term "0,0,1,0,0,1"))
(rule "inEqSimp_commuteGeq" (formula "8") (term "0,0,0,1"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "assignment" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "inEqSimp_sepPosMonomial0" (formula "6"))
(rule "mul_literals" (formula "6") (term "1"))
(rule "inEqSimp_sepPosMonomial0" (formula "5"))
(rule "polySimp_mulComm0" (formula "5") (term "1"))
(rule "polySimp_rightDist" (formula "5") (term "1"))
(rule "mul_literals" (formula "5") (term "0,1"))
(rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
(rule "polySimp_elimOne" (formula "5") (term "1,1"))
(rule "inEqSimp_sepPosMonomial1" (formula "1"))
(rule "mul_literals" (formula "1") (term "1"))
(rule "inEqSimp_sepNegMonomial0" (formula "8") (term "1,0,0,1"))
(rule "polySimp_mulLiterals" (formula "8") (term "0,1,0,0,1"))
(rule "polySimp_elimOne" (formula "8") (term "0,1,0,0,1"))
(rule "inEqSimp_exactShadow3" (formula "4") (ifseqformula "5"))
(rule "times_zero_1" (formula "4") (term "0,0"))
(rule "add_zero_left" (formula "4") (term "0"))
(rule "inEqSimp_sepPosMonomial1" (formula "4"))
(rule "mul_literals" (formula "4") (term "1"))
(rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "2"))
(rule "mul_literals" (formula "3") (term "0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "3"))
(rule "mul_literals" (formula "3") (term "1"))
(rule "emptyModality" (formula "8") (term "1"))
(builtin "One Step Simplification" (formula "8"))
(rule "andRight" (formula "8"))
(branch
   (rule "inEqSimp_leqRight" (formula "8"))
   (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "mul_literals" (formula "1") (term "0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1"))
   (builtin "Evaluate Query" (formula "1") (term "0,0") (newnames "a_0,b_0,callee,queryResult_0,res_pow_0"))
   (rule "replaceKnownQuery_Helper_pow(heap,Z(2(#)),Z(0(#)))_0_0" (formula "2") (term "0,0"))
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "9") (term "0,0,1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "queryResult_0"))
   (rule "methodCallWithAssignmentWithinClass" (formula "9") (term "1") (inst "#v0=x"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_2"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "a_2"))
   (rule "assignment" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "b_2"))
   (rule "assignment" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_pow_0,savedHeapBefore_pow_0"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=x_3"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_3"))
   (rule "equality_comparison_simple" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "ifSplit" (formula "9"))
   (branch "if x_3 true"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "methodCallReturn" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "assignment" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "blockEmpty" (formula "9") (term "1"))
      (rule "assignment" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "emptyModality" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "notRight" (formula "9"))
      (rule "applyEq" (formula "2") (term "0,0") (ifseqformula "1"))
      (rule "polySimp_elimOneLeft0" (formula "2") (term "0"))
      (rule "inEqSimp_homoInEq1" (formula "2"))
      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "1,1,0"))
      (rule "times_zero_1" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "leq_literals" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "if x_3 false"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
(branch
   (rule "inEqSimp_geqRight" (formula "8"))
   (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "1") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "1") (term "0,1,0,0"))
   (rule "mul_literals" (formula "1") (term "0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
   (rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
   (rule "add_literals" (formula "1") (term "0,0,0,0"))
   (rule "add_zero_left" (formula "1") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "1"))
   (rule "polySimp_mulComm0" (formula "1") (term "1"))
   (rule "polySimp_rightDist" (formula "1") (term "1"))
   (rule "polySimp_mulAssoc" (formula "1") (term "0,1"))
   (rule "polySimp_mulComm0" (formula "1") (term "0,0,1"))
   (rule "polySimp_mulLiterals" (formula "1") (term "0,1"))
   (rule "polySimp_elimOne" (formula "1") (term "0,1"))
   (builtin "Evaluate Query" (formula "1") (term "0,0") (newnames "a,b,callee,queryResult,res_pow"))
   (rule "replaceKnownQuery_Helper_pow(heap,Z(2(#)),Z(0(#)))_1_0" (formula "2") (term "0,0"))
   (rule "replaceKnownQuery_Helper_pow(heap,Z(2(#)),Z(0(#)))_1_0" (formula "2") (term "0,1,1"))
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "9") (term "0,0,1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "queryResult"))
   (rule "methodCallWithAssignmentWithinClass" (formula "9") (term "1") (inst "#v0=x"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "a_1"))
   (rule "assignment" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "variableDeclarationAssign" (formula "9") (term "1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "b_1"))
   (rule "assignment" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "methodBodyExpand" (formula "9") (term "1") (newnames "heapBefore_pow,savedHeapBefore_pow"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "ifUnfold" (formula "9") (term "1") (inst "#boolv=x_1"))
   (rule "variableDeclaration" (formula "9") (term "1") (newnames "x_1"))
   (rule "equality_comparison_simple" (formula "9") (term "1"))
   (builtin "One Step Simplification" (formula "9"))
   (rule "ifSplit" (formula "9"))
   (branch "if x_1 true"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "methodCallReturn" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "assignment" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (rule "blockEmpty" (formula "9") (term "1"))
      (rule "assignment" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "methodCallEmpty" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "emptyModality" (formula "9") (term "1"))
      (builtin "One Step Simplification" (formula "9"))
      (rule "notRight" (formula "9"))
      (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "1"))
      (rule "mul_literals" (formula "2") (term "1,1"))
      (rule "polySimp_addComm0" (formula "2") (term "1"))
      (rule "applyEqRigid" (formula "2") (term "0,0") (ifseqformula "1"))
      (rule "polySimp_elimOneLeft0" (formula "2") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "2"))
      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "1,1,0"))
      (rule "times_zero_1" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "qeq_literals" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
   (branch "if x_1 false"
      (builtin "One Step Simplification" (formula "10"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
)
)

}
//statementid:{1f27ded7-6019-4a38-ad2a-fe251c148606}
//modifiable:{n,l}