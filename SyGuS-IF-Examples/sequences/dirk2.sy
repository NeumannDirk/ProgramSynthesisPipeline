(set-logic ALL)

(declare-datatype Tuple ((mkTuple (getField0 Int) (getField1 Int))))

(declare-var x_preCon Int)
(declare-var x_postCon Int)
(declare-var y_preCon Int)
(declare-var y_postCon Int)
(declare-var c_preCon Int)
(declare-var c_postCon Int)

(define-fun preCondition ((x_preCon Int) (y_preCon Int) (c_preCon Int)) Bool
    (and (= x_preCon c_preCon) (= y_preCon (+ c_postCon 1)))
)

(define-fun postCondition ((x_postCon Int) (y_postCon Int) (c_postCon Int)) Bool
    (and (= x_postCon (- c_postCon 1)) (= y_postCon (* c_postCon 2)))
)

(synth-fun targetFunction ((x Int) (y Int) (c Int)) Tuple)

(declare-var x_in Int)
(declare-var x_out Int)
(declare-var y_in Int)
(declare-var y_out Int)
(declare-var c_in Int)

(constraint (forall ((x_in Int) (y_in Int) (c_in Int) (x_out Int) (y_out Int)) 
    (=>
        (and 
            (preCondition x_in y_in c_in) 
            (= x_out (getField0 (targetFunction x_in y_in c_in)))
            (= y_out (getField1 (targetFunction x_in y_in c_in)))
        )
        (postCondition x_out y_out c_in)
    )
))
(check-synth)