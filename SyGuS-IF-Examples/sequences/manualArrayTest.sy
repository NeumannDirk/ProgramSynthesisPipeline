(set-logic ALL)

(declare-datatype Tuple ((empty) (mkTuple (getField0 Int)(getField1 Int) (getField2 (Seq Int)))))
(declare-datatype MySeq ((empty) (mkmyseq (getSeq (Seq Int)))))

(declare-var i_preCon Int)
(declare-var j_preCon Int)
(declare-var A_preCon Int)
(declare-var i_postCon Int)
(declare-var j_postCon Int)
(declare-var A_postCon Int)

(define-fun preCondition ((i_preCon Int) (j_preCon Int) (A_preCon (Seq Int))) Bool (and
        (and
          (and
            (and
              (and
                (and
                  (and
                    (forall
                      ((var_q Int))
                      (=>
                        (and (>= var_q 0) (< var_q (+ j_preCon 1)))
                        (>= (seq.nth A_preCon i_preCon) (seq.nth A_preCon var_q))
                      ))
                    (not (= A_preCon empty)))
                  (> (seq.len A_preCon) 0))
                (< (seq.len A_preCon) 10))
              (>= i_preCon 0))
            (< i_preCon (seq.len A_preCon)))
          (>= j_preCon 0))
        (<= j_preCon (seq.len A_preCon))
    ))

(define-fun postCondition ((i_postCon Int) (j_postCon Int) (A_postCon (Seq Int))) Bool (forall
      ((var_q Int))
      (=>
        (and (>= var_q 0) (< var_q j_postCon))
        (>=
          (seq.at A_postCon i_postCon)
          (seq.at A_postCon var_q)))))

(synth-fun targetFunction ((i Int) (j Int) (A (Seq Int))) Tuple)


(declare-var i_in Int)
(declare-var j_in Int)
(declare-var A_in (Seq Int))
(declare-var i_out Int)
(declare-var j_out Int)
(declare-var A_out (Seq Int))

(constraint (forall ((i_in Int) (i_out Int) (j_in Int) (j_out Int) (A_in (Seq Int)) (A_out (Seq Int))) (=>
	(and
		(preCondition i_in j_in A_in)
		(= i_out (getField0 (targetFunction i_in j_in A_in)))
		(= j_out (getField1 (targetFunction i_in j_in A_in)))
		(= A_out (getField2 (targetFunction i_in j_in A_in)))
	)
	(and
		(postCondition i_out j_out A_out)
		(= A_in A_out)
	)
)))
(check-synth)